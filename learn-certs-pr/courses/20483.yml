### YamlMime:Course
title: Programming in C#
metadata:
  title: 'Course 20483-C: Programming in C#'
  description: 'Course 20483-C: Programming in C#'
uid: course.20483
courseNumber: '20483-C'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Visual C#의 핵심 구문 및 기능 설명.
- skill: 대규모 애플리케이션의 메소드 작성, 예외 처리, 모니터링 요구 사항 설명.
- skill: 일반적인 데스크톱 애플리케이션의 기본 구조와 필수 요소 구현.
- skill: 클래스 생성, 인터페이스 정의 및 구현, 일반 컬렉션 생성 및 사용.
- skill: 상속을 사용한 클래스 계층 생성 및 .NET Framework 클래스 확장.
- skill: 파일 입출력 및 스트림을 사용한 데이터 읽기 및 쓰기, 다른 형식으로 데이터 직렬화 및 역직렬화.
- skill: 데이터베이스에 액세스하기 위한 엔터티 데이터 모델 생성 및 사용, LINQ를 사용해서 데이터 쿼리.
- skill: System.Net 네임스페이스 및 WCF Data Services의 유형을 사용하여 원격 데이터에 대한 액세스 및 쿼리.
- skill: XAML을 사용한 그래픽 사용자 인터페이스 작성.
- skill: 태스크 및 비동기식 연산을 사용한 애플리케이션의 처리량 및 응답 시간 향상.
- skill: 비관리형 라이브러리 및 동적 구성요소를 Visual C# 애플리케이션에 통합.
- skill: 리플렉션을 사용한 유형의 메타데이터 검사, 사용자 지정 특성 생성 및 사용, 런타임시 코드 생성, 어셈블리 버전 관리.
- skill: 대칭 및 비대칭 암호화를 사용한 데이터 암호화 및 암호 해독.
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
products:
- vs
exams:
- uid: exam.70-483
summary: |-
  본 교육 과정에서는 Visual C# 언어를 사용하여 Windows 애플리케이션을 만드는 개발자에게 필요한 프로그래밍 기술을 설명합니다. 5일동안의 강의를 통해 학생들은 Visual C# 프로그램 구조, 언어 구문 및 구현 세부사항의 기본 사항을 복습한 다음 한 주동안 .NET Framework 4.7의 여러 기능을 통합한 애플리케이션을 구축하면서 지식을 강화 합니다.

  #### 대상 그룹 프로필
  본 과정은 이미 C, C++, JavaScript, Objective-C, Microsoft Visual Basic 또는 Java를 사용하여 프로그래밍한 경험이 있고 개체 지향 프로그래밍의 개념을 이해하고 있는 숙련된 개발자를 대상으로 합니다. 본 과정은 프로그래밍을 처음 접하는 학생들이 아니라 개체 지향 환경에서 적어도 한 달 이상 프로그래밍을 해 본 경험 있는 전문 개발자를 대상으로 합니다.
prerequisitesSection: |-
  본 과정에 참가하는 개발자는 이미 C#을 사용하여 기본 프로그래밍 과제를 완료해 본 일정한 경험이 있어야 합니다. 좀 더 구체적으로 말하면 학생들은 다음 사항에 대한 이해를 증명하는 C# 사용에서의 실제 경험이 있어야 합니다.
  - 애플리케이션 내 변수의 이름 지정, 선언, 초기화 및 값 할당 방법.
  - 산술 연산자를 사용하여 하나 이상의 변수를 포함하는 산술 계산을 수행하는 방법, 관계 연산자를 사용하여 두 변수 또는 식 사이의 관계를 검사하는 방법, 논리 연산자를 사용하여 관계 연산자를 포함하는 식을 결합하는 방법.
  - C# 언어 키워드를 사용하여 간단한 프로그래밍 문의 코드 구문을 만들고 Visual Studio IDE를 사용하여 구문 오류를 확인하는 방법.
  - IF 문을 사용하여 간단한 분기 구조를 작성하는 방법.
  - For 문을 사용하여 데이터 배열을 통해 반복할 단순 루프 구조를 작성하는 방법.
  - Visual Studio IDE를 사용하여 간단한 논리 오류를 찾는 방법.
  - 인수(매개 변수 및 지정된 유형의 값의 반환 값)를 수용하는 함수 작성 방법.
  - Visual Studio 도구 상자의 표준 컨트롤을 사용하여 간단한 사용자 인터페이스를 설계하고 개발하는 방법.
  - SQL Server 데이터베이스에 연결하는 방법 및 데이터 검색 및 저장하는 기본 방법.
  - 루프에서 데이터를 정렬하는 방법.
  - 프로그램에서 사용되는 클래스 및 메서드를 식별하는 방법.
outlineSection: |-
  ### 모듈 1&#58; Visual C# 구문 검토
  Microsoft .NET Framework 버전 4.7은 애플리케이션 및 서비스를 개발, 배포, 관리하는 데 사용할 수 있는 포괄적인 개발 플랫폼을 제공합니다. .NET Framework를 사용하여 시각적으로 매력적으로 보이는 애플리케이션을 만들고, 기술 경계를 넘어 원활한 커뮤니케이션을 가능하게 하며, 광범위한 비즈니스 프로세스를 지원할 수 있습니다.

  본 모듈에서는 .NET Framework 및 Microsoft Visual Studio에서 제공하는 몇 가지 핵심 기능에 대해 학습합니다. 또한 .NET Framework 애플리케이션 개발을 시작할 수 있게 하는 몇 가지 핵심 Visual C# 구문에 대해서도 학습합니다.

  #### 단원
  - Visual C#을 사용한 애플리케이션 작성 개요
  - 데이터 유형, 연산자 및 식
  - Visual C# 프로그래밍 언어 구문


  #### 랩 &#58; 학생 명단 편집 기능 구현
  - 학생 명단에 기능 추가 구현
  - 학생 명단에 기능 삭제 구현
  - 학생 연령 표시

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - .NET Framework 애플리케이션의 아키텍처와 Visual Studio 2017 및 Visual C#이 제공하는 기능 설명.
  - 기본 Visual C# 데이터 유형, 연산자 및 식 사용.
  - 표준 Visual C# 구문 사용.

  ### 모듈 2&#58; 메서드 생성, 예외 처리 및 애플리케이션 모니터링
  애플리케이션은 종종 데이터에 대한 액세스를 제공하거나 일부 논리적 처리를 트리거하는 등 특정한 기능을 수행하는 논리적 기능 단위로 구성됩니다. Visual C#은 개체 지향 언어이며, 논리적 기능 단위를 캡슐화하는 메소드의 개념을 사용합니다. 메소드는 단순하거나 복잡할 수 있으므로 메서드에서 예외가 발생할 때 애플리케이션 상태가 어떻게 되는지 고려하는 것이 중요합니다.

  본 모듈에서는 메소드를 작성하고 사용하는 방법과 예외를 처리하는 방법을 설명합니다. 또한 로깅 및 추적 기능을 사용하여 발생한 예외의 상세 내용을 기록하는 방법도 설명합니다.

  #### 단원
  - 메서드 작성 및 호출
  - 중복 정의된 메서드 생성 및 선택 매개 변수 및 출력 매개 변수 사용
  - 예외 처리
  - 애플리케이션 모니터링


  #### 랩 &#58; 학급 등록 애플리케이션 기능 확장
  - 등록 코드 리팩토링
  - 학생 정보 검증
  - 학급 명단의 변경 사항 저장

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 메서드 작성 및 호출.
  - 중복 정의된 메서드 작성 및 선택 매개 변수 사용.
  - 예외 처리.
  - 로깅, 추적 및 프로파일링을 사용한 애플리케이션 모니터링

  ### 모듈 3&#58; Visual C#의 기본형 및 구문
  WPF(Windows Presentation Foundation) 또는 기타 .NET Framework 플랫폼을 사용하여 효과적인 애플리케이션을 작성하려면 먼저 몇 가지 기본적인 Visual C# 구문을 학습해야 합니다. 작업 중인 데이터 항목을 나타내는 간단한 구조를 만드는 방법을 알아야 합니다. 항목을 추가하고 검색하며 항목에 대하여 반복할 수 있도록 이러한 구조를 컬렉션으로 구성하는 방법을 알아야 합니다. 마지막으로 사용자의 액션에 응답할 수 있게 이벤트 가입 방법을 알아야 합니다.

  본 모듈에서는 구조체 및 열거형을 만들고 사용하는 방법, 데이터를 컬렉션으로 구성하고 이벤트를 만들고 구독하는 방법을 설명합니다.

  #### 단원
  - 구조체 및 열거형 구현
  - 데이터를 컬렉션으로 구성
  - 이벤트 처리


  #### 랩 &#58; 성적 프로토타입 애플리케이션 코드 작성
  - 성적 프로토타입 애플리케이션에 탐색 논리 추가
  - 사용자 및 성적 정보를 저장할 데이터 유형 생성
  - 사용자 및 성적 정보 표시

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 구조체 및 열거형 생성 및 사용.
  - 컬렉션 클래스를 사용한 데이터 구성.
  - 이벤트 생성 및 구독.

  ### 모듈 4&#58; 클래스 생성 및 형식 안전 컬렉션 구현
  본 모듈에서는 인터페이스와 클래스를 사용하여 사용자 정의 재사용 형식을 정의하고 생성하는 방법을 배웁니다. 또한 열거형의 형식 안전 컬렉션을 만들고 사용하는 방법도 배우게 됩니다.
  #### 단원
  - 클래스 생성
  - 인터페이스 정의 및 구현
  - 형식 안전 컬렉션 구현


  #### 랩 &#58; 애플리케이션에 데이터 검증 및 형식 안전성 추가
  - 교사, 학생 및 성적 구조체를 클래스로 구현
  - 성적 클래스에 데이터 검증 추가
  - 이름 순서대로 학생 표시
  - 교사가 학급 및 등급 데이터 수정할 수 있도록 설정

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - 클래스 생성 및 인스턴스화.
  - 인터페이스 생성 및 인스턴스화.
  - 총칭을 사용한 형식 안전 컬렉션 생성.


  ### 모듈 5&#58; 상속을 사용한 클래스 계층 구조 작성
  본 모듈에서는 상속을 사용하여 클래스 계층 구조를 만들고 .NET Framework 형식을 확장하는 방법에 관해 설명합니다.
  #### 단원
  - 클래스 계층구조 작성
  - .NET Framework 클래스 확장


  #### 랩 &#58; 일반 기능을 사용자 클래스로 리팩터링
  - 일반 기능을 사용자 클래스로 리팩토링
  - 추상 메서드를 사용한 암호 복잡도 구현
  - ClassFullException 사용자 지정 예외 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - 기본 클래스 및 상속을 사용한 파생 클래스 작성.
  - .NET Framework 클래스에서 상속되는 클래스 작성.


  ### 모듈 6&#58; 로컬 데이터 읽기 및 쓰기
  본 모듈에서는 트랜잭션 파일 시스템 I/O 작업을 사용하여 데이터를 읽고 쓰는 방법, 파일 시스템에 데이터를 직렬화 및 역직렬화하는 방법, 스트림을 사용하여 파일 시스템에 데이터를 읽고 쓰는 방법을 설명합니다.
  #### 단원
  - 파일 읽기 쓰기
  - 데이터 직렬화 및 역직렬화
  - 스트림을 사용한 I/O 수행


  #### 랩 &#58; 성적 보고서 작성
  - 성적 보고서 데이터를 XML로 직렬화
  - 성적 보고서 미리보기
  - 직렬화된 성적 데이터를 파일로 저장

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - 파일 I/O를 사용하여 파일 시스템에서 데이터 읽기 쓰기.
  - 데이터를 파일이나 다른 데이터 원본에서 쓰거나 읽을 수 있는 형식으로 변환.
  - 스트림을 사용하여 파일 또는 데이터 원본과 데이터 통신.


  ### 모듈 7&#58; 데이터베이스 액세스
  본 모듈에서는 엔터티 데이터 모델(EDM)을 작성하고 사용하는 방법과 LINQ(통합 언어 쿼리)를 사용하여 다양한 유형의 데이터를 쿼리하는 방법을 설명합니다.
  #### 단원
  - 엔터티 데이터 모델 작성 및 사용
  - LINQ을 사용한 데이터 쿼리.


  #### 랩 &#58; 성적 데이터 검색 및 수정
  - 미술학교 데이터베이스에서 엔터티 데이터 모델 작성
  - 엔터티 프레임워크를 사용한 학생 및 성적 데이터 업데이트
  - 데이터 검증을 위한 엔터티 데이터 모델 확장

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - EDM 작성, 사용 및 사용자 정의.
  - LINQ을 사용한 데이터 쿼리.


  ### 모듈 8&#58; 원격 데이터 액세스
  본 모듈에서는 System.Net 네임스페이스의 요청 및 응답 클래스를 사용하여 원격 데이터 원본을 직접 조작하는 방법에 관해 설명합니다. 또한 WCF(Windows Communication Foundation)의 Data Services를 사용하여 웹에서 EDM(엔터티 데이터 모델)을 공개하고 사용하는 방법도 설명합니다.
  #### 단원
  - 웹에서 데이터 액세스
  - OData Connected Services를 사용한 데이터 액세스


  #### 랩 &#58; 원격으로 성적 데이터 검색 및 수정
  - SchoolGrades 데이터베이스에 사용할 WCF Data Service 작성
  - 애플리케이션으로 Data Service 통합
  - 웹에서 학생 사진 검색(시간이 허락되는 경우)

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - 웹 서비스 및 기타 원격 데이터 원본에서 데이터 전송 및 수신.
  - WCF Data Services를 사용한 데이터 액세스.


  ### 모듈 9&#58; 그래픽 애플리케이션을 위한 사용자 인터페이스 설계
  본 모듈에서는 XAML(Extensible Application Markup Language) 및 WPF(Windows Presentation Foundation)를 사용하여 해당 UI를 만드는 방법에 관해 설명합니다.
  #### 단원
  - XAML을 사용하여 사용자 인터페이스 설계
  - 데이터에 컨트롤 연결


  #### 랩 &#58; 학생 사진 사용자 지정 및 애플리케이션 스타일 지정
  - 학생 사진 표시 방식 사용자 정의
  - 로그온 뷰의 스타일 지정
  - StudentPhoto 컨트롤 애니메이션(시간이 허락되는 경우)

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - XAML을 사용하여 UI 설계.
  - 데이터에 XAML 컨트롤 연결.
  - XAML UI에 스타일 적용.


  ### 모듈 10&#58; 애플리케이션 성능 및 응답성 개선
  본 모듈에서는 작업을 다중 스레드에 분산하여 애플리케이션의 성능을 개선하는 방법에 관해 설명합니다.
  #### 단원
  - 멀티태스킹 구현
  - 비동기식으로 작업 수행
  - 데이터에 대한 동시 액세스 동기화


  #### 랩 &#58; 애플리케이션의 응답성 및 성능 개선
  - 교사 데이터 검색 시 UI 응답성 유지
  - 장시간 실행 작업 시 시각적 피드백 제공

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - Task Parallel Library를 사용한 멀티태스킹 구현.
  - 스레드를 차단하지 않고 장시간 실행 작업 수행.
  - 다중 스레드가 동시에 리소스에 액세스할 수 있는 방법 제어.


  ### 모듈 11&#58; 비관리 코드와 통합
  본 모듈에서는 애플리케이션의 비관리 코드를 상호 운용하는 방법과 코드에서 비관리 리소스의 해제를 확인하는 방법에 관해 설명합니다.
  #### 단원
  - 동적 개체 생성 및 사용
  - 개체 수명 관리 및 비관리 리소스 제어


  #### 랩 &#58; 성적 보고서 업그레이드
  - Word를 사용한 성적 보고서 작성
  - Dispose 패턴을 구현하여 Word 개체의 수명 제어

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - DLR(Dynamic Language Runtime)을 사용하여 비관리 코드를 Microsoft Visual C# 애플리케이션에 통합.
  - 비관리 리소스의 수명 제어 및 애플리케이션이 리소스를 해제하는지 확인.


  ### 모듈 12&#58; 재사용 가능한 유형 및 어셈블리 생성
  본 모듈에서는 리플렉션를 통해 기존 어셈블리를 사용하는 방법과 속성을 사용하여 유형 및 유형 멤버에 메타데이터를 추가하는 방법을 학습합니다. 또한 CodeDOM(Code Document Object Model)을 사용하여 런타임 시 코드를 생성하는 방법과 GAC(Global assembly cache)를 사용하여 어셈블리가 서명 및 버전 지정되고 다른 애플리케이션에서 사용할 수 있도록 하는 방법에 대해서도 설명합니다.
  #### 단원
  - 개체 메타데이터 검사
  - 사용자 지정 속성 생성 및 사용
  - 관리 코드 작성
  - 어셈블리 버전, 서명 및 배포


  #### 랩 &#58; 성적 보고서에 포함할 데이터 지정
  - IncludeInReport 속성 생성 및 적용
  - 보고서 업데이트
  - Grades.Utilities 어셈블리 중점 보관(시간이 허락되는 경우)

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - 리플렉션을 사용한 어셈블리 검사 및 실행.
  - 사용자 지정 속성 생성 및 사용.
  - CodeDOM을 사용하여 런타임 시 관리 코드 생성.
  - 어셈블리 버전, 서명 및 GAC에 배포.


  ### 모듈 13&#58; 데이터 암호화 및 암호 해제
  본 모듈에서는 대칭 및 비대칭 암호화를 구현하는 방법과 해시를 사용하여 데이터의 수학적 표현을 생성하는 방법에 관해 설명합니다. 또한 X509 인증서를 작성하고 관리하는 방법과 비대칭 암호화 프로세스에서 인증서를 사용하는 방법에 대해서도 설명합니다.
  #### 단원
  - 대칭 암호화 구현
  - 비대칭 암호화 구현


  #### 랩 &#58; 성적 보고서 암호화 및 암호 해제
  - 성적 보고서 암호화
  - 성적 보고서 암호화

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다&#58;
  - 대칭 암호화를 사용한 데이터 암호화.
  - 비대칭 암호화를 사용한 데이터 암호화.

