### YamlMime:Course
title: Designing and Implementing Microsoft DevOps solutions
metadata:
  title: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
  description: 'Course AZ-400T00-A: Designing and Implementing Microsoft DevOps solutions'
uid: course.az-400t00
courseNumber: 'AZ-400T00-A'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 공유 목표와 타임라인을 통해 변환 계획
- skill: 프로젝트를 선택하고 프로젝트 메트릭스 및 핵심성과지표(KPI's) 식별
- skill: 팀과 민첩한 조직구조 생성
- skill: 도구 통합 전략 디자인
- skill: 라이선스 관리 전략 디자인 (예. Azure DevOps 및 GitHub 사용자들)
- skill: 작업 항목에서 작업하는 소프트웨어까지 전반적인 추적성을 위한 전략 디자인
- skill: 인증 및 접근 전략 디자인
- skill: 온-프레미스 및 cloud 리소스 통합을 위한 전략 디자인
- skill: 소스 컨트롤 사용의 이점 설명
- skill: Azure 저장소 및 GitHub 설명
- skill: TFVC에서 Git으로 마이그레이션
- skill: 기술 부채 SonarCloud, 및 기타 도구 솔루션을 포함한 코드 품질 관리
- skill: 코드 품질에 대한 조직적 지식 구축
- skill: Git 저장소 조직하는 방법 설명
- skill: Git 분기 업무 흐름 설명
- skill: 협업 및 코드 검토를 위한 풀 리퀘스트 활용
- skill: 자동화를 위한 Git 후크 활용
- skill: 조직 전반에 걸친 내부 소스 발전을 위한 Git 사용
- skill: Azure Pipelines의 역할과 그 구성 요소 설명
- skill: Azure Pipelines에서 사용하는 에이전트 구성
- skill: 지속적인 통합이 중요한 이유 설명
- skill: Azure Pipelines을 사용하여 지속적인 통합 구현
- skill: 사이트 신뢰성 엔지니어링 정의
- skill: 최종 사용자 만족 측정 및 사용자 피드백 분석을 위한 프로세스 디자인
- skill: 애플리케이션 분석 자동화를 위한 프로세스 디자인
- skill: 경고 관리 및 의미 없고 실행-불능의 경고 줄임
- skill: 흠잡을 데 없는 회고를 수행하고 정의로운 문화 창조
- skill: 방출 파이프라인 및 애플리케이션 인프라를 위한 인프라 및 구성 전략과 적절한 도구 세트 정의
- skill: 애플리케이션 인프라에서 규정 준수 및 보안 구현
- skill: 오픈-소스 소프트웨어 통합에 대한 잠재된 문제 설명
- skill: 보안 및 라이선스 준수를 위한 오픈-소스 소프트웨어 패키지 검사
- skill: 조직적 보안 및 규정 준수 정책 관리
- skill: 라이선스 및 취약성 검색을 빌드와 배포 파이프라인으로 통합
- skill: 패키지 보안 및 라이선스 등급에 접근하기 위한 빌드 파이프라인 구성
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- advanced
roles:
- devops-engineer
products:
- azure
- azure-devops
- azure-kubernetes-service
- azure-container-instances
- azure-automation
exams:
- uid: exam.az-400
summary: |-
  본 과정에서는 DevOps 프로세스 및 관행을 구현하기 위한 지식과 기술을 제공합니다. 응시자들은 DevOps 계획, 소스 제어 사용, 엔터프라이즈용 Git 확장, Artifacts 통합, 종속성 관리 전략 설계, 비밀 관리, 연속 통합 구현, 컨테이너 빌드 전략 구현, 릴리스 관리 워크플로우 설정, 배포 패턴 구현, 피드백 메커니즘 최적화 방법을 학습합니다.
  
  #### 대상 그룹 프로필
  이 과정의 학생들은 DevOps 프로세스를 디자인하고 구현하거나 Microsoft Azure DevOps Solutions 인증 시험을 통과하는데 관심이 있습니다.
prerequisitesSection: |-
  성공한 학습자는 다음에 대한 사전 지식과 이해가 있을 것입니다&#58;
  - PaaS, SaaS, 및 IaaS 구현에 대한 이해를 포함한 Cloud 컴퓨팅 개념
  - 이들 영역의 최소한 한가지에서 Azure 관리 및 Azure 개발 모두에 대한 입증된 전문성.
  - 버전 제어, Agile 소프트웨어 개발 및 핵심 소프트웨어 개발 원칙. 소프트웨어를 제공하는 조직에서 경험이 있으면 도움이 될 것입니다.
  
  Azure 및 cloud 컴퓨팅을 처음 접하시는 경우, 다음 리소스 중 한 가지를 고려해보십시오&#58;
  - 무료 온라인&#58; Azure Fundamentals (https://docs.microsoft.com/en-us/learn/paths/azure-fundamentals/) 
  - 강사-주도 과정&#58; AZ-900&#58; Azure Fundamentals (https://docs.microsoft.com/en-us/learn/certifications/courses/az-900t01)
  
  Azure Administration을 처음 접하시는 경우, 다음을 선택하는 것을 고려하십시오&#58;
  - 무료 온라인&#58; Azure Administrators를 위한 필수 조건 (https://docs.microsoft.com/en-us/learn/paths/az-104-administrator-prerequisites/)
  - 강사-주도 과정&#58; AZ-104&#58; Microsoft Azure Administrator (https://docs.microsoft.com/en-us/learn/certifications/courses/az-104t00) 및 AZ-010&#58; Azure Administration for AWS SysOps (https://docs.microsoft.com/en-us/learn/certifications/courses/az-010t00)
  
  Azure Developer를 처음 접하시는 경우라면, 다음을 선택하는 것을 고려하십시오&#58;
  - 무료 온라인&#58; 서버 없는 애플리케이션 만들기 (https://docs.microsoft.com/en-us/learn/paths/create-serverless-applications/)
  - 강사-주도 과정&#58; AZ-204&#58; Developing Solutions for Microsoft Azure (https://docs.microsoft.com/en-us/learn/certifications/courses/az-204t00) 및 AZ-020&#58; Microsoft Azure Solutions for AWS Developers (https://docs.microsoft.com/en-us/learn/certifications/courses/az-020t00)
outlineSection: |-
  ### 모듈 1&#58; DevOps 계획
  #### 단원
  - 전환 계획
  - 프로젝트 선택
  - 팀 구조
  - Azure DevOps로 마이그레이션
  
  #### 랩 &#58; Azure Boards를 통한 Agile 계획 및 포트폴리오 관리
  이 모듈을 완료 후, 학생들은 다음을 할 수 있습니다&#58;
  - 공유된 목표 및 타임라인으로 전환 계획 
  - 프로젝트를 선택하고 프로젝트 메트릭스 및 핵심성과지표 (KPI's) 식별
  - 팀과 민첩한 조직 구조 생성
  - 도구 통합 전략 디자인 
  - 라이선스 관리 전략 디자인 (예. Azure DevOps 및 GitHub 사용자들)
  - 작업 항목에서 작업하는 소프트웨어까지 전반적인 추적성을 위한 전략 디자인
  - 인증 및 접근 전략 디자인
  - 온-프레미스 및 cloud 리소스 통합을 위한 전략 디자인

  
  ### 모듈 2&#58; 소스 제어 시작하기
  #### 레슨
  - 소스 제어는 무엇인가
  - 소스 제어의 이점
  - 소스 제어 시스템 유형
  - Azure 저장소 소개
  - GitHub 소개
  - Team Foundation Version Control (TFVC)에서 Azure 저장소의 Git으로 마이그레이션
  
  #### 랩 &#58; Azure 저장소의 Git으로 버전 제어하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 소스 제어를 사용의 이점 설명
  - Azure 저장소 및 GitHub 설명 
  - TFVC에서 Git으로 마이그레이션
  
  
  ### 모듈 3&#58; 기술 부채 관리
  #### 레슨
  - 기술 부채 식별하기
  - 팀 내에서 지식 공유
  - Codespaces로 개발 환경 현대화하기
  
  #### 랩 &#58; Azure Project Wikis를 사용하여 팀 지식 공유하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 기술 부채 SonarCloud, 및 기타 도구 솔루션을 포함한 코드 품질 관리
  - 코드 품질에 대한 조직적 지식 구축
  
  
  ### 모듈 4&#58; 기업 DevOps을 위한 Git로 작업하기
  #### 레슨
  - Git 저장소 구성하는 방법
  - Git 분기 업무 흐름
  - Azure 저장소에서 풀 리퀘스트로 협력하기
  - Git Hooks에 관심이 있는 이유
  - 내부 소스 조성하기
  - Git 저장소 관리하기
  
  #### 랩 &#58; Azure 저장소에서 Git으로 버전 제어하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - Git 저장소 구성하는 방법 설명 
  - Git 분기 업무 흐름 설명
  - 협업 및 코드 검토를 위한 풀 리퀘스트 활용 
  - 자동화를 위한 Git 후크 활용 
  - 조직 전반에 걸친 내부 소스 발전을 위한 Git 사용 
  
  
  ### 모듈 5&#58; Azure Pipelines 구성하기
  #### 레슨
  - DevOps에서 파이프라인의 개념
  - Azure Pipelines
  - 호스팅 에이전트 대 자체-호스팅 에이전트의 사용 평가
  - 에이전트 풀
  - 파이프라인 및 동시 실행
  - Azure DevOps 및 오픈-소스 프로젝트 (공개 프로젝트)
  - Azure Pipelines YAML 대 시각 디자이너
  
  #### 랩 &#58; 에이전트 풀 구성하기 및 파이프라인 스타일 이해하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - Azure Pipelines의 역할과 그 구성 요소 설명
  - Azure Pipelines에서 사용하는 에이전트 구성
  
  
  ### 모듈 6&#58; Azure Pipelines을 사용하여 지속적인 통합 구현하기
  #### 레슨
  - 지속적인 통합 개요
  - 구축 전략 구현하기
  - Azure Pipelines과 통합
  - 외부 소스 제어를 Azure Pipelines와 통합하기
  - 자체-호스팅 에이전트 설정
  
  #### 랩 &#58; Azure Pipelines과의 지속적인 통합 활성화하기
  
  #### 랩 &#58; 외부 소스 제어와 Azure Pipelines 통합하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있습니다&#58;
  - 지속적인 통합이 중요한 이유 설명 
  - Azure Pipelines을 사용하여 지속적인 통합 구현
  
  
  ### 모듈 7&#58; 애플리케이션 구성 및 비밀 관리하기
  #### 레슨
  - 보안 소개
  - 보안 개발 프로세스 구현
  - 애플리케이션 구성 데이터 다시 생각하기
  - 비밀, 토큰 및 인증서 관리
  - 신원 관리 시스템과 통합하기
  - 애플리케이션 구성 구현하기
  
  #### 랩 &#58; Azure Key Vault와 Azure DevOps 통합하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 애플리케이션 구성 및 비밀 관리
  - Azure Key Vault와 파이프라인 통합 
  
  
  ### 모듈 8&#58; GitHub 작업과 지속적 통합 구현하기
  #### 레슨
  - GitHub 작업
  - GitHub 작업과 지속적인 통합
  - GitHub 작업에 대한 비밀 보안하기
  
  #### 랩 &#58; GitHub 작업 지속적 통합
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있습니다&#58;
  - GitHub 작업 및 작업 흐름으로 생성 및 작업
  - GitHub 작업과 지속적인 통합 구현
  
  
  ### 모듈 9&#58; 종속적 관리 전략 디자인하기 및 구현하기
  #### 레슨
  - 종속성 패키징
  - 패키지 관리
  - 아티팩트 마이그레이션 및 강화하기
  - 패키지 보안
  - 버전 관리 전략 구현하기
  
  #### 랩 &#58; Azure Artifacts로 패키지 관리
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 아티팩트 관리 도구 및 실행 권장
  - 공유 및 재사용을 가능하게 하는 추상 공통 패키지
  - 아티팩트 마이그레이션 및 강화 
  - 소스 제어 측정 마이그레이션 및 통합
  
  
  ### 모듈 10&#58; 릴리스 전략 디자인하기
  #### 레슨
  - 지속적인 제공 소개 
  - 릴리스 전략 권장사항 
  - 고-품질 릴리스 파이프라인 구축하기
  - 올바른 릴리스 관리 도구 선택하기
  
  #### 랩 &#58; 릴리스 게이트를 사용하여 배포 제어하기
  
  #### 랩 &#58; 릴리스 대시보드 만들기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 릴리스와 배포 구분
  - 릴리스 파이프라인의 구성 요소 정의
  - 릴리스 전략을 디자인할 때 고려해야하는 사항들 설명
  - 릴리스 대 릴리스 프로세스를 분류하고, 양쪽 모두 품질을 제어하는 방법 개요 
  - 릴리스 게이트의 원칙 및 릴리스 기록과 문서화 처리 방법 설명
  - 릴리스 관리 도구 선택

  ### 모듈 11&#58; Azure Pipelines를 사용하여 지속적인 배포 구현하기
  #### 레슨
  - 릴리스 파이프라인 생성
  - 환경 프로비저닝 및 구성
  - 작업 및 템플릿 관리 및 모듈화
  - 자동화된 통합 및 기능 테스트 자동화 구성
  - 건강 검사 자동화
  
  #### 랩 &#58; YAML으로 파이프라인을 코드로 구성하기
  
  #### 랩 &#58; 기능 테스트 설정하기 및 실행하기 
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - Azure DevOps 및 다른 릴리스 관리 도구에서 사용되는 용어 설명
  - 빌드와 릴리스 작업이 무엇인지, 무엇을 할 수 있는지, 몇가지 사용 가능한 배포 작업 설명
  - 때때로 하나의 릴리스 파이프라인에서 다중 릴리스 작업이 필요한 이유 설명
  - 다중-에이전트와 다중-구성 릴리스 작업의 구분
  - 릴리스 파이프라인에서 릴리스 변수와 단계 변수 사용
  - 서비스 연결을 사용하여 안전하게 환경에 배포
  - 경고, 서비스, 후크 및 보고서를 사용하여 파이프라인과 릴리스의 상태를 검사하는 다양한 방법 나열
  
  
  ### 모듈 12&#58; 적절한 배포 패턴 구현하기
  #### 레슨
  - 배포 패턴 소개
  - 블루 그린 배포 구현
  - 특징 토글 
  - 카나리아 릴리스
  - 다크 런칭
  - AB 테스트
  - 점진적인 노출 배포
  
  #### 랩 &#58; LaunchDarkly 및 Azure DevOps를 사용한 특징 플래그 관리
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 배포 패턴 설명
  - 블루 그린 배포 구현
  - 카나리아 릴리스 구현
  - 점진적인 노출 배포 구현
  
  
  ### 모듈 13&#58; Azure 도구를 사용하여 인프라 및 구성 관리하기
  #### 레슨
  - 코드로서 인프라 및 구성 관리
  - ARM 템플릿을 사용하여 Azure 리소스 생성
  - Azure CLI를 사용하여 Azure 리소스 생성
  - DevOps로 Azure 자동화
  - 원하는 상태 구성 (DSC)
  
  #### 랩 &#58; Resource Manager Templates을 사용하여 Azure 배포
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 코드 원칙으로 인프라 및 구성 적용
  - ARM 템플릿, PowerShell, 및 Azure CLI와 같은 Microsoft 자동화 기술을 사용하여 인프라 배포 및 관리
  
  
  ### 모듈 14&#58; Azure와 함께 사용 할 수 있는 코드 도구로서의 타사 인프라
  #### 레슨
  - Chef
  - Puppet
  - Ansible
  - Terraform
  
  #### 랩 &#58; Terraform 및 Azure Pipelines으로 Cloud에서 인프라 배포 자동화하기
  
  #### 랩 &#58; Azure의 Chef로 앱 배포하기
  
  #### 랩 &#58; Azure의 Puppet으로 앱 배포
  
  #### 랩 &#58; Azure와 Ansible
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - Chef, Puppet, Ansible, 및 Terraform과 같은 타사 도구 및 Azure의 서비스를 사용하여 인프라 배포 및 구성 
  
  
  ### 모듈 15&#58; Docker를 사용하여 컨테이너 관리하기
  #### 레슨
  - 컨테이너 구축 전략 구현하기
  - Docker 다-단계 빌드 구현하기
  
  #### 랩 &#58; Azure로 기존 ASP.NET 앱 현대화하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 컨테이너가 가상 기계와 어떻게 다른지 및 마이크로서비스가 컨테이너를 사용하는 방법을 포함하는 컨테이너 전략 구현 
  - Docker를 사용하여 컨테이너 구현
  - Docker 다-단계 빌드 구현
  
  
  ### 모듈 16&#58; Kubernetes 서비스 인프라 생성하기 및 관리하기
  #### 레슨
  - Azure Kubernetes Service
  - Kubernetes 도구
  - AKS와 Pipelines 통합하기
  
  #### 랩 &#58; Azure Kubernetes Service으로 다중-컨테이너 애플리케이션 배포하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 관리 Kubernetes 클러스터 배포 및 구성
  
  
  ### 모듈 17&#58; 개발 팀을 위한 피드백 구현하기
  #### 레슨
  - 시스템 사용량, 특징 사용량 및 흐름 추적을 위한 도구 구현 
  - 모바일 애플리케이션 충돌 보고서 데이터에 대한 라우팅 구현
  - 모니터링 및 상태 대시보드 개발
  - 티켓팅 시스템 통합 및 구성
  
  #### 랩 &#58; 애플리케이션 인사이트로 애플리케이션 성능 모니터링하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 시스템 사용량, 특징 사용량 및 흐름 추적을 위한 도구 구현
  - 클라이언트 애플리케이션에 대한 충돌 보고서 통합 구성
  - 클라이언트 애플리케이션 충돌 보고서 데이터에 대한 라우팅 구현
  - 모니터링 및 상태 대시보드 개발
  - 티켓팅 시스템을 개발 팀의 작업 관리와 통합 및 구성
  
  
  ### 모듈 18&#58; 시스템 피드백 메커니즘 구현하기 
  #### 레슨
  - 사이트 신뢰성 엔지니어링 
  - 최종-사용자 만족도 측정을 위한 실행 설계 
  - 사용자 피드백을 캡처 및 분석하기위한 프로세스 디자인
  - 애플리케이션 분석 자동화를 위한 프로세스 디자인
  - 경고 관리하기
  - 흠잡을 데 없는 회고 및 정의로운 문화
  
  #### 랩 &#58; Azure DevOps와 Teams 간의 통합
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 사이트 신뢰성 엔지니어링 정의
  - 최종-사용자 만족도 측정 및 사용자 피드백 분석을 위한 프로세스 디자인
  - 애플리케이션 분석 자동화를 위한 프로세스 디자인
  - 경고 관리 및 의미 없고 실행-불능의 경고 줄임
  - 흠잡을 데 없는 회고를 수행하고 정의로운 문화 창조
  
  
  ### 모듈 19&#58; DevOps 프로젝트에서 보안 구현하기
  #### 레슨
  - 파이프라인의 보안
  - Azure Security Center
  
  #### 랩 &#58; Azure DevOps Pipeline에서 보안 및 규정 준수 구현
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 릴리스 파이프라인 및 애플리케이션 인프라를 위한 인프라 및 구성 전략과 적절한 도구 세트 정의 
  - 애플리케이션 인프라에서 규정 준수 및 보안 구현
  
  
  ### 모듈 20&#58; 규정 준수를 위한 코드 베이스 입증하기
  #### 레슨
  - 오픈-소스 소프트웨어
  - 보안 및 규정 준수 정책 관리하기
  - 라이선스 및 취약성 검색 통합하기 
  
  #### 랩 &#58; SonarQube와 Azure DevOps으로 기술 부채 관리하기
  
  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 오픈-소스 소프트웨어 통합으로 잠재적인 문제 설명 
  - 보안 및 라이선스 규정 준수를 위한 오픈-소스 소프트웨어 패키지 검사
  - 조직 보안 및 규정 준수 정책 관리
  - 라이선스 및 취약성 검색을 빌드 및 배포 파이프라인으로 통합
  - 패키지 보안 및 라이선스 등급에 접근하기 위해 빌드 파이프라인 구성