### YamlMime:Course
title: Building web apps with Angular and TypeScript
metadata:
  title: 'Course 55266-A: Building web apps with Angular and TypeScript'
  description: 'Course 55266-A: Building web apps with Angular and TypeScript'
uid: course.55266
courseNumber: '55266-A'
hoursToComplete: 72
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: TypeScript로 애플리케이션을 설정하고 작성합니다.
- skill: Angular 애플리케이션을 만들고 관리합니다.
- skill: 데이터 바인딩을 사용하여 화면을 업데이트합니다.
- skill: 복잡한 인터페이스를 구성 요소로 분할합니다.
- skill: 자신의 지시문과 파이프를 작성합니다.
- skill: 검증으로 복잡한 양식을 만듭니다.
- skill: REST 백엔드와 통신합니다.
- skill: 클라이언트-측 라우팅으로 단일 페이지 애플리케이션을 작성합니다.
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
summary: |-
  최근 몇 년 동안 HTML과 JavaScript를 단지 웹 콘텐츠가 아닌 웹 앱을 위한 더 나은 장소로 만들기 위해 많은 노력을 기울여 왔습니다. Angular로, 이러한 새롭고 현대적인 개념을 이용하여 다음 단계로 이동할 수 있습니다. 구성 요소화된 접근 방식을 사용함으로써, Angular는 성능 기준에 맞는 데이터-주도 웹-앱을 구축하기 위해 그 어느 때보다 잘 준비되어 있습니다. Angular가 데이터 바인딩, 탐색 및 서버 통신을 처리하는 반면; TypeScript는 JavaScript가 모든 브라우저에서 제공하는 가장 고급 기능들을 사용할 수 있습니다. 강력한 타이핑과 같은 기능들은 애플리케이션을 더 유지할 수 있고, 더 잘 구조화하고 유연하게 만듭니다. 이 과정은 Angular의 최신 버전, 현재 Angular 6으로 지속적으로 업데이트되고 있습니다. Google의 Angular 및 Microsoft의 TypeScript 사이의 멋진 시너지 효과를 즐기십시오. 

  #### 구독자 프로필
  이 과정은 Angular 및 TypeScript의 세계로 시작하려는 전문 웹 개발자를 대상으로 합니다. 이 과정의 참가자들은 JavaScript, HTML 및 CSS와 node.js 및 npm에 대한 일반 개념을 잘 이해하고 있어야 합니다.
prerequisitesSection: |-
  이 과정에 참여하기 전에, 학생들은 반드시 다음을 갖추어야합니다&#58;
  - JavaScript에 대해 잘 이해하고 있습니다. 
  - HTML 및 CSS에 대해 기본을 이해하고 있습니다. 
  - node.js 및 npm에 대한 최소한 일반 개념.
  Visual Studio Code 또는 WebStorm과 같은 웹 개발을 위한 IDE.
outlineSection: |-
  ### 모듈 1&#58; Angular 소개
  이 모듈에서는 Angular에 대한 모든 것과 이것이 현대 웹 개발에 왜 그렇게 중요한지 살펴봅니다. 
  #### 레슨
  - 웹 앱 개발의 진화
  - Angular Core 및 모듈
  - TypeScript, Dart, 기존 JavaScript

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 최신 웹 UI 기술과 현대 개발에서 그들이 수행하는 역할에 대해 이해합니다. 


  ### 모듈 2&#58; TypeScript으로 강력한 형식의 JavaScript
  현실을 직시합시다&#58; JavaScript는 큰 애플리케이션을 위해 디자인되지 않았습니다. 인터페이스 및 강력한 타이핑과 같은 복잡한 코드를 다스리기 위한 많은 구조가 완전히 부재합니다. 그리고 많은 새로운 멋진 JS 기능은 현재 브라우저에서 구현되지 않습니다. TypeScript 는 두 가지 문제에 대한 해결책입니다; 현대, 애플리케이션-규모 JavaScript를 작성할 수 있게합니다. 
  #### 레슨
  - 애플리케이션-규모 JavaScript 작성하기
  - TypeScript으로 형식-안정 JavaScript 개발
  - 유형, 클래스 및 상속 구현하기 
  - 네임스페이스 및 모듈 


  #### 랩 &#58; 장난감 가게
  - TypeScript 프로젝트 시작하기
  - 모델 만들기&#58; 제품, 카테고리, 주문
  - 쇼핑카트 만들기
  - 외부 라이브러리 사용하기 
  - HTML 페이지에 코드 추가하기

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - TypeScript의 이점을 이해하고 있습니다. 
  - TypeScript에 대한 핵심 기능 사용 
  - 새로운 TypeScript 프로젝트 설정
  - TypeScript 프로젝트 컴파일 및 실행


  ### 모듈 3&#58; 핵심 개념
  이 모듈에서는 모든 Angular 애플리케이션의 가장 중요한 빌딩 블럭을 숙지하게 됩니다.
  이것은 다음 챕터의 기본입니다. 
  #### 레슨
  - 구성 요소
  - 모듈
  - 서비스
  - 도구


  #### 랩 &#58; 첫 번째 프로젝트 검사하기
  - 실행중인 프로젝트 열기
  - 애플리케이션의 요소
  - 모듈 로딩하기
  - tsconfig.json

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 구성 요소 및 서비스의 목표를 이해합니다.
  - 구성 요소 및 서비스를 모듈로 그룹화합니다.Angular 도구로 작업합니다.

  ### 모듈 4&#58; 데이터 바인딩
  데이터 바인딩은 JavaScript 코드를 작성하는 동안 HTML에 대해 잊어버릴 수 있게 합니다. 이는 둘 사이에 강력한 종속성을 만들지 않고도 보기에 데이터를 삽입할 수 있게 합니다. 이는 더 유연하고, 테스트가 가능하며 유지가 가능한 코드의 결과로 발생합니다.
  #### 레슨
  - 바인딩의 중요성
  - 보기 구성 요소
  - 구조적 지시어
  - 로컬 템플릿 변수
  - 가치 변환
  - 구성 요소 보기


  #### 랩 &#58; 데이터 바인딩으로 작업 관리자 
  - 모듈
  - 작업 목록 표시하기
  - 스타일
  - 작업 추가하기

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 데이터 바인딩을 사용하여 보기를 반들고 업데이트합니다.
  - 구성 요소에서 사용자 상호 작용을 처리합니다.
  - 로컬 템플릿 변수가 있는 요소를 참조합니다.
  - 가치 변환을 위해 파이프를 사용합니다.


  ### 모듈 5&#58; 구성 요소
  이 모듈에서는 구성 요소에 대해 좀 더 자세히 살펴보겠습니다. 구성 요소의 계층 구조를 만드는 방법과 구성 요소 사이의 통신 방법을 배우게 됩니다.
  #### 레슨
  - 여러 구성 요소 사용하기
  - 입력 및 출력
  - ViewChild 및 ContentChild
  - EventEmitter
  - 지시 수명 주기 


  #### 랩 &#58; 작업 관리자&#58; 여러 구성 요소 사용하기
  - 어떤 스타일 추가하기
  - TaskCreator 구성 요소
  - TaskCard 구성 요소
  - TaskList 구성 요소
  - 앱 구성 요소
  - 구성 요소 등록하기

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 복잡한 구성 요소를 여러 구성 요소로 분할
  - 부모-자녀 통신 설정
  - 다양한 수명 주기 고리로 작업


  ### 모듈 6&#58; 속성 지시어
  기존 요소에 사용자 지정 행동을 추가하려면 어떻게 해야합니까? 이 모듈에서는 NgClasses 및 NgStyle과 같은 기존 지시어를 살펴봅니다; 그리고 자신만의 것을 구축하는 방법을 알아봅니다.
  #### 레슨
  - 속성 지시어란 무엇입니까?
  - 기본-제공 속성 지시어
  - 사용자 지정 속성 지시어

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 속성 지시어의 역할을 이해합니다.
  - 기본-제공 속성 지시어를 사용합니다.
  - 자신만의 속성 지시어를 만듭니다.

  ### 모듈 7&#58; 구조적 지시어
  구조적 지시어를 사용하면 HTML의 흐름을 변경할 수 있습니다. 예를 들어, JavaScript에서 HTML를 작성하지 않고 어떻게 데이터를 기반으로 동적으로 HTML를 생성합니까?
  #### 레슨
  - 구조적 지시어란 무엇입니까?
  - 기본-제공 구조적 지시어
  - 템플릿
  - 사용자 지정 구조적 지시어

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 구조적 지시어의 역할을 이해합니다.
  - 기본-제공 구조적 지시어를 사용합니다. 
  - 자신만의 구조적 지시어를 만듭니다.


  ### 모듈 8&#58; Dependency Injection 및 Providers
  Dependency Injection (DI)는 두 개의 강하게 결합된 개체를 가져와서 분리하는 기술입니다. 이것은 이해 가능하고, 유지 가능하며 테스트 가능한 코드를 작성하게 도와줍니다. Angular에서 실제 어느 하나의 선택이 아닙니다&#58; 그것을 해야만 합니다. Angular는 이 모듈에서 살펴볼 DI를 지원하는 Providers를 기반으로 하는 전체 메커니즘을 가지고 있습니다.  
  #### 레슨
  - 용어
  - Dependency Injection 기초
  - 서비스
  - 공급자
  - 공장
  - 주입 토큰


  #### 랩 &#58; 태스크 서비스 만들기
  - 서비스 구현하기
  - 서비스 제공하기
  - AppComponent 업데이트하기
  - 모의 서비스를 실제 서비스로 대체하기

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 자신만의 서비스를 만듭니다. 
  - Angular의 다양한 공급자와 협력합니다.
  - 서비스를 구성 요소 및 기타 서비스에 삽입합니다.


  ### 모듈 9&#58; 파이프
  파이프는 보기에서 값을 거의 변경하지 않는 편리한 방법입니다. 이는 데이터 형식 지정 및 필터링이 포함됩니다. 파이프의 가능성을 쉽게 사용하고 확장 할 수 있습니다. 
  #### 레슨
  - 파이프 사용하기
  - 기본-제공 파이프
  - 사용자 지정 파이프
  - 순수 대 불순


  #### 랩 &#58; 온도 파이프
  - Kelvin, Celsius 및 Farenheit에서 온도를 표시하기 위한 파이프를 만듭니다.
  - 새롭게 만들어진 파이프를 사용

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 기본-제공 파이프를 사용합니다.
  - 자신만의 파이프를 만듭니다.
  - 순수 파이프의 중요성을 이해합니다.


  ### 모듈 10&#58; 양식으로 작업하기
  양식은 데이터를 관리할 수 있는 모든 앱에 필수적입니다. 단지 데이터 바인딩 이상의 작업이 필요합니다. 유효성 검사, 자동 서식 지정, 데이터 변경에 대한 응답 등이 필요합니다. Angular는 이를 처리하기 위한 두 가지 다른 접근 방식을 제공합니다&#58; 템플릿-주도 양식 및 모델-주도 양식. 이 모듈은 두 가지 모두를 살펴봅니다. 
  #### 레슨
  - 양식의 내용
  - 변경에 대한 대응
  - 폼빌더
  - 데이터 유효성 검사


  #### 랩 &#58; 작업 편집기 양식
  - TaskEditor 구성 요소
  - 기본 유효성 검사
  - 여러 검증
  - 사용자 지정 검증

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 템플릿-주도 및 모델-주도 양식 중에서 선택합니다.
  - 양식을 만들고 정보를 제출합니다.
  - 유효성 검사 및 시각적 피드백을 추가합니다. 


  ### 모듈 11&#58; 서버와 대화하기
  이 모듈은 데이터를 검색하고 백엔드로 보내는 방법을 알려줍니다. REST에 초점을 맞추고 RxJS's Observables를 사용하여 작업을 완료합니다.
  #### 레슨
  - 데이터 보내기 및 받기
  - HTTPClient 모듈
  - HTTP 인터셉터
  - Observables 대 Promises


  #### 랩 &#58; Observables으로 작업하기
  - 옵저버블과 함께 작동하는 구성 요소 업데이트


  #### 랩 &#58; 서버와 대화하기
  - HttpClient 모듈 제공하기
  - HTTP 서비스 구현하기

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - HttpClient로 작업하여 REST 호출합니다.
  - 옵저버블로 결과를 처리합니다.


  ### 모듈 12&#58; 단일 페이지 애플리케이션 구축하기
  한 페이지에서 다음 페이지로 이동하는 대신, 웹 사이트를 단일 페이지 애플리케이션으로 디자인할 수 있습니다. 이는 웹 사이트가 더 애플리케이션처럼 느껴지게 하고 성능이 향상됩니다. SPAs에는 많은 장점이 있지만, 대개 구현하기가 어렵습니다. 이 모듈은 Angular에서 SPA를 구축하는 데 사용할 수 있는 구성에 대해 설명합니다. 
  #### 레슨
  - SPA는 무엇인가
  - 라우터 모듈
  - 경로 구성
  - 부모-자녀 탐색
  - 경로 가드


  #### 랩 &#58; 7SPA 구축하기&#58; Rabbit Rescue
  - 정적 HTML을 구성 요소 및 템플릿으로 대체
  - 기능 영역 별 라우팅 설정
  - 기능 영역을 루트 영역과 연결하기 

  이 모듈을 완료 후, 학생들은 다음을 할 수 있게 됩니다&#58;
  - 단일 페이지 애플리케이션을 만듭니다.
  - 기능 영역을 만듭니다.
  - 기능 별 라우팅을 설정합니다.
  - 가드로 탐색을 가로챕니다.

  #### 추가 자료
  없음