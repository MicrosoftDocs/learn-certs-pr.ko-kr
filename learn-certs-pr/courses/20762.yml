### YamlMime:Course
title: Developing SQL Databases
metadata:
  title: 'Course 20762-C: Developing SQL Databases'
  description: 'Course 20762-C: Developing SQL Databases'
uid: course.20762
courseNumber: '20762-C'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: 테이블 설계 및 구현.
- skill: 고급 테이블 설계 설명.
- skill: 제약 조건을 통한 데이터 무결성 보장.
- skill: 최적화 및 Columnstore 인덱스를 포함한 인덱스 설명
- skill: 뷰 설계 및 구현.
- skill: 저장된 프로시저 설계 및 구현.
- skill: 사용자 정의 함수 설계 및 구현.
- skill: 트리거를 사용한 데이터 조작 응답.
- skill: In-Memory 설계 및 구현.
- skill: SQL Server내 관리 코드 구현.
- skill: XML 데이터 저장 및 쿼리.
- skill: 공간 데이터로 작업.
- skill: Blob 및 텍스트 문서 저장 및 쿼리.
learningPartnersLink: https://www.microsoft.com/learning/partners.aspx
locales:
- en
levels:
- advanced
roles:
- database-administrator
products:
- sql-server
exams:
- uid: exam.70-762
summary: "이 5일간의 강사 지도식 과정은 학생들에게 Microsoft SQL Server 데이터베이스 개발을 위한 지식 및 기술을 제공합니다. 이 과정은 데이터베이스 개발과 관련된 SQL Server 제품 기능 및 도구 사용 방법을 개인에게 가르치는 데 중점을 둡니다.\n\n#### 대상 그룹 프로필\n이 과정의 주요 대상 그룹은 데이터베이스 구현 시 SQL Server 제품 기능 및 기술에 능숙하려는 IT 전문가입니다. \n\n이 과정의 두 번째 대상 그룹은 다른 제품 플랫폼 개발자 및 SQL Server 데이터베이스 구현에 능숙하려는 개인입니다."
prerequisitesSection: "- Microsoft Windows 운영 체제 및 해당 핵심 기능 기초 지식.\n- Transact-SQL 실무 지식. \n- 관계형 데이터베이스 실무 지식."
outlineSection: |-
  ### 모듈 1&#58; 데이터베이스 개발 소개
  개발 또는 관리 역할에서 Microsoft SQL Server 작업을 시작하기 전 SQL Server 플랫폼 범위를 이해하는 것이 중요합니다. 특히 SQL Server는 단지 데이터베이스 엔진이 아니라 기업 데이터 관리를 위한 완전한 플랫폼임을 이해하는 것이 유용합니다.

  SQL Server는 쉽고 강력한 개발을 위한 포괄적인 도구 집합 이외에도 조직의 모든 규모에 강력한 데이터 플랫폼을 제공합니다.
  #### 단원
  - SQL Server 플랫폼 소개
  - SQL Server 데이터베이스 개발 과제

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server 플랫폼 설명. 
  - SQL Server 관리 도구 사용.


  ### 모듈 2&#58; 테이블 설계 및 구현
  RDBMS(관계형 데이터베이스 관리 시스템)에서 사용자 및 시스템 데이터는 테이블에 저장됩니다. 각 테이블은 엔터티와 엔터티 특성을 포함하는 행 집합을 설명하는 열 집합으로 구성됩니다. 예를 들어 고객 테이블은 고객 이름, 신용 한도액 등 열과 각 고객에 대한 행이 있을 수 있습니다. Microsoft SQL Server에서 데이터 관리 소프트웨어 테이블은 운영 체제의 파일을 포함하는 폴더의 개념과 매우 유사한 스키마 내에 포함됩니다. 테이블 설계는 데이터베이스 개발자가 수행하는 가장 중요한 작업 중 하나입니다. 왜냐하면 잘못된 테이블 설계로 인해 데이터를 효율적으로 쿼리 할 수 없기 때문입니다.

  적절한 디자인을 생성한 후 이 디자인을 올바르게 구현하는 방법을 아는 것이 중요합니다.
  #### 단원
  - 테이블 설계
  - 데이터 유형
  - 스키마를 통한 작업
  - 테이블 작성 및 변경


  #### 랩 &#58; 테이블 설계 및 구현
  - 테이블 설계
  - 스키마 생성
  - 테이블 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 정규화, 기본 및 외래 키를 사용한 테이블 설계.
  - ID 열로 작업.
  - 기본 제공 및 사용자 데이터 형식 이해.
  - 데이터베이스 설계에 스키마를 사용하여 데이터 구성 및 객체 보안 관리.
  - 계산된 열 및 임시 테이블로 작업.


  ### 모듈 3&#58; 고급 테이블 설계
  데이터베이스의 물리적 설계는 당사자가 설정한 저장소 및 성능 요구 사항을 충족시키는 데이터베이스 능력에 상당한 영향을 줄 수 있습니다. 물리적 데이터베이스 구현 설계에는 파일 그룹 계획, 파티셔닝을 사용한 큰 테이블 관리 방법 및 압축을 사용한 저장소 및 성능 향상이 포함됩니다. 임시 테이블은 SQL Server의 새로운 기능이며 데이터 변경 내용을 수집하는 간단한 루션을 제공합니다.
  #### 단원
  - 데이터 분할
  - 데이터 압축
  - 임시 테이블


  #### 랩 &#58; 고급 테이블 설계 사용
  - 데이터 분할
  - 데이터 압축

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server 데이터베이스에서 분할된 테이블 사용을 위한 고려 사항을 설명.
  - SQL Server 데이터베이스에서 데이터 압축 사용을 위한 계획.
  - 임시 테이블을 사용한 데이터에 변경사항 저장 및 쿼리.


  ### 모듈 4&#58; 제약 조건을 통한 데이터 무결성 보장
  데이터베이스의 데이터 품질은 품질에 의존하는 애플리케이션의 유용성 및 효율성을 결정하며 조직 또는 비즈니스 벤처의 성공 또는 실패는 품질에 의존합니다. 데이터 무결성 보장은 고품질 데이터 유지 관리 시 중요한 단계입니다.

  저장소를 통한 첫 번째 항목 또는 컬렉션에서 모든 애플리케이션 수준에서 데이터 무결성을 적용해야 합니다. Microsoft SQL Server 데이터 관리 소프트웨어는 작업을 단순화하는 다양한 기능을 제공합니다.
  #### 단원
  - 데이터 무결성 적용
  - 데이터 도메인 무결성 구현
  - 엔터티 및 참조 무결성 구현


  #### 랩 &#58; 제약 조건을 통한 데이터 무결성 사용
  - 제약 조건 추가
  - 제약 조건 테스트

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 데이터 무결성 강화 옵션 및 적용해야 할 수준 설명.
  - Check, UNIQUE 및 기본값 제약 조건 등 옵션을 통한 도메인 무결성 구현.
  - 기본 및 외래 키 제약 조건을 통한 참조 무결성 구현.


  ### 모듈 5&#58; 인덱스 소개
  인덱스는 테이블과 연관된 페이지 모음입니다. 인덱스는 쿼리 성능 향상 및 고유성 강화에 사용됩니다. 인덱스 구현을 학습하기 전에 인덱스 작동 방식, 다른 데이터 유형이 인덱스 내에서 사용될 때 효율 정도 및 여러 열에서 인덱스를 구성하는 방법을 이해하는 것이 도움이 됩니다. 이 모듈에서는 Microsoft SQL Server에서 인덱스가 없는 테이블 구조 및 사용 가능한 다양한 인덱스 유형을 설명합니다.
  #### 단원
  - 주요 인덱싱 개념
  - 데이터 유형 및 인덱스
  - 힙, 클러스터형 및 비 클러스터형 인덱스
  - 단일 열 및 종합 인덱스


  #### 랩 &#58; 인덱스 구현
  - 힙 생성
  - 클러스터형 인덱스 생성
  - 커버된 인덱스 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 핵심 인덱싱 개념 성명.
  - 다양한 데이터 유형에 사용할 인덱스 평가.
  - 단일 및 복합 열 인덱스 간 차이점 설명.


  ### 모듈 6&#58; 최적화된 인덱스 전략 설계
  인덱스는 SQL Server가 데이터베이스에서 빠르고 효율적으로 데이터를 검색하는 데 중요한 역할을 합니다. 이 모듈에서는 커버링 인덱스, INCLUDE 절, 쿼리 힌트, 패딩 및 채우기 비율, 통계, DMO 사용, 데이터베이스 튜닝 관리자 및 쿼리 저장소를 포함한 고급 인덱스 주제를 설명합니다.
  #### 단원
  - 인덱스 전략
  - 인덱스 관리
  - 실행 계획
  - 데이터베이스 엔진 튜닝 관리자
  - 쿼리 저장소


  #### 랩 &#58; 인덱스 최적화
  - 쿼리 저장소 사용
  - 힙 및 클러스터형 인덱스
  - 커버된 인덱스 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 커버링 인덱스 개념 및 사용 시기.
  - 인덱스 관리와 관련된 문제.
  - 실제 및 예상 실행 계획.
  - 데이터베이스 튜닝 관리자를 사용한 쿼리 성능 향상 방법.
  - 쿼리 저장소를 사용한 쿼리 성능 향상 방법.


  ### 모듈 7&#58; Columnstore 인덱스
  Microsoft SQL Server 2012에 도입된 columnstore 인덱스는 많은 조직의 대규모 Data Warehouse 솔루션에서 사용됩니다. 이 모듈에서는 큰 데이터 집합에 이러한 인덱스의 사용 이점, SQL Server 2016의 columnstore 인덱스 향상 및 솔루션에서 columnstore 인덱스를 효과적으로 사용하기 위해 필요한 고려 사항을 강조합니다.

  #### 단원
  - Columnstore 인덱스 소개
  - Columnstore 인덱스 생성
  - Columnstore 인덱스로 작업


  #### 랩 &#58; Columnstore 인덱스 사용
  - Columnstore 인덱스 생성
  - 메모리 최적화 Columnstore 테이블 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - Columnstore 인덱스 설명 및 사용에 적합한 시나리오 식별.
  - 클러스터형 및 비클러스터형 columnstore 인덱스 생성.
  - Columnstore 인덱스 사용 시 고려 사항 설명.


  ### 모듈 8&#58; 뷰 설계 및 구현
  이 모듈에서는 뷰의 설계 및 구현을 설명합니다. 뷰는 테이블처럼 저장되어 다른 쿼리에서 사용할 수 있는 특수한 유형의 쿼리입니다. 뷰를 사용하면 결과 집합이 아닌 쿼리 정의만 디스크에 저장됩니다. 이에 대한 유일한 예외는 테이블처럼 결과 집합이 디스크에 저장할 때 인덱싱된 뷰입니다.

  뷰는 추상화 계층을 제공하고 테이블 조인의 복잡성을 숨겨 데이터베이스 설계를 단순화합니다. 뷰는 또한 사용자에게 원본 객체에 대한 권한 부여 없이 뷰를 사용할 수 있는 권한을 사용자에게 부여하고 데이터를 보호하는 방법입니다. 즉, 데이터를 비공개로 유지할 수 있고 적절한 사용자만 볼 수 있습니다.
  #### 단원
  - 뷰 소개
  - 부 생성 및 관리
  - 뷰의 성능에 대한 고려 사항


  #### 랩 &#58; 뷰 설계 및 구현
  - 표준 뷰 생성
  - 업데이트 가능한 뷰 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 데이터베이스 설계에서 뷰의 역할 이해.
  - 뷰 생성 및 관리.
  - 뷰를 사용하여 성능 고려 사항 이해.


  ### 모듈 9&#58; 저장된 프로시저 설계 및 구현
  이 모듈에서는 저장된 프로시저 설계 및 구현을 설명합니다.
  #### 단원
  - 저장된 프로시저 소개
  - 저장된 프로시저로 작업
  - 매개 변수화된 저장된 프로시저 구현
  - 실행 컨텍스트 제어


  #### 랩 &#58; 저장된 프로시저 설계 및 구현
  - 저장된 프로시저 생성
  - 매개 변수화된 저장된 프로시저 생성
  - 저장된 프로시저 실행 컨텍스트 변경

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 저장된 프로시저 개념과 이점 이해.
  - 저장된 프로시저 설계, 생성 및 변경.
  - 저장된 프로시저 실행 컨텍스트 제어.
  - 매개 변수를 사용한 저장된 프로시저 구현.


  ### 모듈 10&#58; 사용자 정의 함수 설계 및 구현
  함수는 자주 수행되는 논리를 캡슐화하는 데 사용하는 루틴입니다. 여러 장소에서 함수 논리를 반복하지 않고 함수 호출을 할 수 있습니다. 이로 인해 코드 유지 관리가 가능하며, 디버그가 더 쉽습니다.

  이 모듈에서는 비즈니스 규칙 및 데이터 일관성을 강화하는 UDF(사용자 정의 함수) 설계 및 구현 방법을 학습합니다. 또한 기존 함수 수정 및 유지 관리 방법도 학습합니다.
  #### 단원
  - 함수 개요
  - 스칼라 함수 설계 및 구현
  - 테이블 반환 함수 설계 및 구현
  - 함수 구현을 위한 고려 사항
  - 함수에 대한 대안

  #### 랩 &#58; 사용자 정의 함수 설계 및 구현
  - 전화번호 서식화
  - 기존 함수 수정

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 다른 함수 유형 설명.
  - 스칼라 함수 설계 및 구현.
  - TVF(테이블 반환 함수) 설계 및 구현.
  - 함수 구현을 위한 고려 사항 설명.
  - 함수에 대한 대안 설명.


  ### 모듈 11&#58; 트리거를 통한 데이터 조작에 응답
  DML(데이터 조작 언어) 트리거는 도메인, 엔터티, 참조 데이터 무결성 및 비즈니스 논리 적용 시 사용할 수 있는 강력한 도구입니다. 무결성 강화를 통해 안정적인 애플리케이션 구축을 지원합니다. 이 모듈에서는 DML 트리거 개념, 데이터 무결성 적용 방법, 사용 가능한 다른 유형의 트리거 및 데이터베이스에서 트리거 정의 방법을 학습합니다.


  #### 단원
  - DML 트리거 설계
  - DML 트리거 구현
  - 고급 트리거 개념


  #### 랩 &#58; 트리거를 사용한 데이터 조작 응답
  - 감사 트리거 생성 및 테스트
  - 감사 트리거 향상

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - DML 트리거 설계
  - DML 트리거 구현
  - 중첩 및 재귀 등 고급 DML 트리거 개념 설명.


  ### 모듈 12&#58; In-Memory 테이블 사용
  Microsoft SQL Server 2014 데이터 관리 소프트웨어는 OLTP 워크로드 성능 향상을 위해 In-Memory OLTP(온라인 트랜잭션 프로세스) 기능을 도입했습니다. SQL Server는 메모리 최적화 테이블을 재생성 없이 변경하는 기능 등 몇 가지 기능을 추가합니다. 메모리 최적화 테이블은 주로 메모리에 저장되어 하드 디스크 액세스를 줄여 성능 향상을 제공합니다.

  고유하게 컴파일된 저장된 프로시저를 사용하여 기존에 인터프리터된 Transact-SQL의 성능을 향상합니다.
  #### 단원
  - 메모리 최적화 테이블
  - 고유하게 컴파일된 저장된 프로시저


  #### 랩 &#58; In-Memory 데이터베이스 기능 사용
  - 메모리 최적화 테이블 사용
  - 고유하게 컴파일된 저장된 프로시저 사용

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다.
  - 메모리 최적화 테이블을 사용하여 래치 바인딩 된 워크로드 성능 향상.
  - 고유하게 컴파일된 저장된 프로시저 사용.


  ### 모듈 13&#58; SQL Server내 관리 코드 구현
  SQL Server 전문가로서 비즈니스 요구를 충족하는 데이터베이스를 생성해야 합니다. Transact-SQL을 사용하여 대부분의 요구 사항을 충족할 수 있습니다. 그러나 때때로 CLR(공용 언어 런타임) 코드를 사용해야만 충족할 수 있는 추가 기능이 필요할 수 있습니다.

  신규 릴리스마다 SQL Server에 기능이 추가되므로 관리 코드 사용 필요성이 감소합니다. 그러나 집계, 저장된 프로시저, 트리거, 사용자 정의 함수 또는 사용자 정의 형식을 생성해야 하는 경우가 있습니다. .NET Framework 언어를 사용하여 이러한 객체를 개발할 수 있습니다.

  이 모듈에서는 CLR 관리 코드를 사용하여 SQL Server의 사용자 정의 데이터베이스 객체 생성 방법을 학습합니다.
  #### 단원
  - SQL Server의 CLR 통합 소개
  - CLR 어셈블리 구현 및 게시


  #### 랩 &#58; SQL Server내 관리 코드 구현
  - 제안된 CLR 코드 평가
  - 스칼라 반환 CLR 함수 생성
  - 테이블 반환 CLR 함수 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server의 CLR 통합 중요성 설명. 
  - SSDT(SQL Server Data Tools)을 사용한 CLR 어셈블리 구현 및 게시.


  ### 모듈 14&#58; SQL Server에 XML 데이터 저장 및 쿼리
  XML은 기계가 읽을 수 있는 형식으로 문서를 인코딩하기 위한 규칙을 제공합니다. 비구조적 문서를 전송하지 않고 데이터 구조를 표현하기 위해 널리 채택된 표준이 되었습니다. Microsoft SQL Server 데이터 관리 소프트웨어를 실행하는 서버는 종종 다른 시스템과 데이터 교환을 위해 XML을 사용해야 합니다. 많은 SQL Server 도구는 XML 기반 인터페이스를 제공합니다.
  SQL Server는 저장 및 쿼리를 위해 XML 처리를 광범위하게 제공합니다. 이 모듈에서는 XML, SQL Server 내에 XML 데이터 저장 방법 및 XML 데이터 쿼리 방법을 소개합니다.
  XML 데이터를 직접 쿼리할 수 있음으로 SQL(구조적 쿼리 언어) 쿼리 실행 전 관계형 형식으로 데이터를 추출할 필요가 없습니다. XML을 효과적으로 처리하려면 기존 관계형 데이터 XML로 반환 및 이미 XML인 데이터 쿼리 등 여러 방법으로 XML 데이터를 쿼리할 수 있어야 합니다.
  #### 단원
  - XML 및 XML 스키마 소개
  - SQL Server에 XML 데이터 및 스키마 저장
  - XML 데이터 유형 구현
  - Transact-SQL FOR XML 문 사용
  - XQuery로 시작하기
  - XML 분할


  #### 랩 &#58; SQL Server에서 XML 데이터 저장 및 쿼리
  - XML 사용 시기 결정
  - 변수의 XML 데이터 저장소 테스트
  - XML 스키마 사용
  - FOR XML 쿼리 사용
  - XML을 반환하는 저장된 프로시저 생성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - XML 및 XML 스키마 설명.
  - SQL Server에 XML 데이터 및 관련 XML 스키마 저장.
  - SQL Server 내 XML 인덱스 구현.
  - Transact-SQL FOR XML 문 사용.
  - 기본 XQuery 쿼리로 작업.


  ### 모듈 15&#58; SQL Server에서 공간 데이터 저장 및 쿼리
  이 모듈에서는 공간 데이터 및 SQL Server 내 데이터 구현 방법을 설명합니다.
  #### 단원
  - 공간 데이터 소개
  - SQL Server 공간 데이터 형식으로대한 작업
  - 애플리케이션에서 공간 데이터 사용


  #### 랩 &#58; SQL Server 공간 데이터로 작업
  - Geometry 데이터 형식에 친숙
  - 기존 테이블에 공간 데이터 추가
  - 인근 위치 찾기

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server에서 공간 데이터 저장 방식 설명.
  - GEOMETRY 및 GEOGRAPHY 데이터 유형의 기본 메서드 사용
  - 공간 데이터를 포함하는 데이터베이스 쿼리


  ### 모듈 16&#58; SQL Server에서 BLOB 및 텍스트 문서 저장 및 쿼리.
  일반적으로 데이터베이스는 정수, 날짜 및 문자열 등 간단한 값의 값으로 정보를 저장하는 데 사용되었습니다. 이는 문서, 스프레드시트, 이미지 파일 및 비디오 파일 등 더 복잡한 데이터 형식과 대비됩니다. 데이터베이스가 지원하는 시스템이 더 복잡해지면서 관리자는 이러한 복잡한 파일 데이터를 데이터베이스 테이블의 구조화된 데이터와 통합해야 할 필요가 있다고 생각했습니다. 예를 들어, 제품 데이터베이스에서 해당 제품의 서비스 매뉴얼 또는 교육 비디오와 제품 레코드를 연관 지으면 도움이 될 수 있습니다. SQL Server는 BLOB(Binary Large Object)로도 알려진 이러한 파일을 통합하고 콘텐츠를 인덱싱하여 검색 결과에 포함할 수 있는 몇 가지 방법을 제공합니다. 이 모듈에서는 BLOB 포함 데이터베이스 설계 및 최적화 방법을 학습합니다.
  #### 단원
  - BLOB 데이터 고려 사항
  - FILESTREAM로 작업
  - 전체 텍스트 검색 사용


  #### 랩 &#58; SQL Server에서 BLOB 및 텍스트 문서 저장 및 쿼리
  - FILESTREAM 열 활성화 및 사용
  - 파일 테이블 활성화 및 사용
  - 전체 텍스트 인덱스 사용

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - BLOB 데이터를 통합하는 데이터베이스 설계 시 고려 사항 설명.
  - FILESTREAM을 사용하여 Windows 파일 시스템에 BLOB 데이터 저장 시 이점 및 설계 고려 사항 설명.
  - 전체 텍스트 인덱스 및 의미 체계 검색 이점 설명 및 이러한 기능을 사용하여 비구조적 데이터를 포함한 SQL Server 데이터 검색 방법 설명


  ### 모듈 17&#58; SQL Server 동시성
  이 모듈에서는 변수 이름 지정, 선언, 값 할당 및 사용 방법을 설명합니다. 배열에 데이터를 저장하는 방법도 설명합니다.
  동시성 제어는 다중 사용자 데이터베이스 시스템의 중요한 기능이며 많은 사용자가 동시에 데이터를 수정할 때 데이터 일관성을 유지할 수 있습니다. 이 모듈에서는 Microsoft SQL Server의 동시성 구현을 다룹니다. SQL Server가 동시성 제어를 구현하는 방법과 동시성 설정 구성 및 작업을 위한 다양한 방법을 학습합니다.

  #### 단원
  - 동시성 및 트랜잭션
  - 잠금 내부 구조


  #### 랩 &#58; SQL Server 동시성
  - 스냅샷 격리 구현
  - 파티션 수준 잠금 구현

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다.
  - SQL Server의 동시성 및 트랜잭션 설명.
  - SQL Server 잠금 설명.


  ### 모듈 18&#58; 성능 및 모니터링
  이 모듈에서는 변수 이름 지정, 선언, 값 할당 및 사용 방법을 설명합니다. 배열에 데이터를 저장하는 방법도 설명합니다.
  이 모듈에서는 SQL Server 데이터베이스의 성능 측정 및 모니터링 방법을 살펴봅니다. 처음 두 과정에서는 Microsoft SQL Server 데이터베이스 엔진에 내장된 유연한 경량 이벤트 처리 시스템인 SQL Server 확장 이벤트를 살펴봅니다. 이 단원에서는 아키텍처 개념, 문제 해결 전략 및 사용 시나리오에 중점을 둡니다.
  #### 단원
  - 확장된 이벤트
  - 확장 이벤트로 작업
  - 실시간 쿼리 통계
  - 데이터베이스 파일 구성 최적화
  - 메트릭


  #### 랩 &#58; 모니터링, 추적 및 기준선 설정
  - 확장 이벤트를 사용한 데이터 수집 및 분석
  - 기준선 방법론 구현

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다.
  - 확장된 이벤트 및 사용 방법 이해.
  - 확장된 이벤트로 작업.
  - 실시간 쿼리 통계 이해.
  - 데이터베이스 파일 구성 최적화.
  - DMV 및 성능 모니터를 사용하여 기준선 생성 및 성능 메트릭 수집.

