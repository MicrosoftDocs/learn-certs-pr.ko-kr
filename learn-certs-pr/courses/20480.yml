### YamlMime:Course
title: Programming in HTML5 with JavaScript and CSS3
metadata:
  title: 'Course 20480-C: Programming in HTML5 with JavaScript and CSS3'
  description: 'Course 20480-C: Programming in HTML5 with JavaScript and CSS3'
uid: course.20480
courseNumber: '20480-C'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: Visual Studio 2017을 사용하여 웹 애플리케이션을 생성하고 실행하는 방법 설명.
- skill: HTML5의 새로운 기능 기술, HTML5 페이지 생성 및 스타일 설명.
- skill: JavaScript를 사용하여 HTML5 페이지에 상호작용 추가.
- skill: 각이한 입력 유형을 사용하여 HTML5 양식을 생성하고 HTML5 속성 및 JavaScript 코드를 사용하여 사용자 입력을 검증.
- skill: XMLHTTP Request 개체 및 Fetch API를 사용하여 원격 데이터 원본과 데이터 주고 받기.
- skill: CSS3을 사용하여 HTML5 페이지 스타일 지정.
- skill: 잘 구조화되고 변경하기 쉬운 JavaScript 코드 생성.
- skill: 최신 JavaScript 코드 생성 및 babel을 사용하여 모든 브라우저와 호환성 보장.
- skill: 상호적인 웹 애플리케이션에서 일반 HTML5 API 사용.
- skill: 오프라인 작업을 지원하는 웹 애플리케이션 생성.
- skill: 다른 기기 및 폼 팩터에 적응할 수 있는 HTML5 웹 페이지 생성.
- skill: Canvas 요소와 Scalable Vector Graphics을 사용하여 HTML5 페이지에 고급 그래픽 추가.
- skill: HTML5 페이지에 애니메이션을 추가하여 사용자 환경 개선.
- skill: 웹 소켓을 사용하여 웹 애플리케이션과 서버 간에 데이터 주고 받기.
- skill: Web Worker 프로세스를 사용하여 장기간 실행되는 작업을 수행하는 웹 애플리케이션의 응답성 향상.
- skill: WebPack을 사용하여 프로덕션용 웹 응용 프로그램 패키징.
learningPartnersLink: /learn/certifications/partners
locales:
- en
levels:
- intermediate
roles:
- developer
products:
- vs
exams:
- uid: exam.70-480
summary: |-
  본 과정에서는 HTML5, CSS3 및 JavaScript를 소개합니다. 본 과정을 수료하면 학생들이 기본적인 HTML5/CSS3/JavaScript 프로그래밍 기술을 습득할 수 있습니다. 본 과정은 웹 애플리케이션과 Windows Store 앱 교육 경로의 시작점입니다. HTML5/CSS3/JavaScript를 사용하여 프로그래밍 논리를 구현하고, 변수를 정의 및 사용하며, 루프와 분기를 수행하고, 사용자 인터페이스를 개발하고, 사용자 입력을 캡처 및 검증하고, 데이터를 저장하고, 잘 구조화된 앱을 만드는 데 중점을 두고 있습니다. 본 과정의 랩 시나리오에서는 다양한 애플리케이션 시나리오의 구조를 지원하고 시연합니다. HTML5 소프트웨어 애플리케이션을 개발하는 데 사용되는 원칙과 코딩 요소/구조에 중점을 둡니다. 본 과정에서는 Windows 10에서 실행되는 Visual Studio 2017를 사용합니다.

  #### 대상 그룹 프로필
  본 과정은 6-12개월의 프로그래밍 경험이 있고 JavaScript 및 CSS3과 HTML5를 사용하여 애플리케이션(Windows 10 용 Windows Store 앱 또는 웹 애플리케이션)을 개발하는 데 관심이 있는 전문 개발자를 대상으로 합니다.
prerequisitesSection: |-
  - 간단한 JavaScript 코드 작성을 포함하여 1~3개월의 웹 애플리케이션 생성 경험
  - 1개월 이상의 Windows 클라이언트 애플리케이션 생성 경험
  - 1개월 이상 Visual Studio 2017을 사용한 경험
outlineSection: |-
  ### 모듈 1&#58; HTML 및 CSS 개요
  대부분의 최신 웹 애플리케이션은 사용자가 읽고 상호 작용하는 콘텐츠를 기술하는 HTML 페이지, 시각적으로 만족스러운 콘텐츠를 만드는 스타일 시트, 사용자와 페이지, 페이지와 서버 간의 상호 작용 수준을 제공하는 JavaScript 코드를 기반으로 개발됩니다. 웹 브라우저는 HTML 마크업과 스타일시트를 사용하여 내용을 표시하고 JavaScript 코드를 실행하여 애플리케이션의 동작을 구현합니다. 본 모듈에서는 HTML 및 CSS의 기본 사항을 검토하고 본 과정에서 HTML 페이지 및 스타일시트를 만드는 데 사용하는 도구를 소개합니다.
  #### 단원
  - HTML 개요
  - CSS 개요
  - Visual Studio 2017을 이용한 웹 애플리케이션 생성


  #### 랩 &#58; Contoso Conference 애플리케이션 탐색
  - Contoso Conference 애플리케이션 탐색
  - Contoso Conference 애플리케이션 검토 및 수정

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - HTML 요소 및 속성을 사용하여 웹 페이지를 작성하는 방법 설명.
  - CSS를 사용하여 웹 페이지에 기본 스타일을 적용하는 방법 설명.
  - Microsoft Visual Studio에서 웹 애플리케이션 작성을 위해 제공하는 도구 설명.


  ### 모듈 2&#58; HTML 페이지 생성 및 스타일 지정
  여러 해 동안 웹 애플리케이션의 기초를 이루는 HTML, CSS 및JavaScript 기술이 사용되어 왔지만 웹 애플리케이션의 목적과 정교함이 크게 변화했습니다. HTML5는 10년 만에 처음으로 HTML의 주요 개정판이며, 기존의 웹 애플리케이션, 휴대용 모바일 장치에서 실행되는 애플리케이션 및 Windows 10 플랫폼에 콘텐츠를 표시하는 적합한 방법을 제공합니다. 본 모듈에서는 HTML5를 소개하고, 새로운 기능을 설명하며, HTML5의 새로운 기능을 사용하여 콘텐츠를 표시하는 방법과 CSS를 사용하여 콘텐츠 스타일을 지정하는 방법을 설명합니다.
  #### 단원
  - HTML5 페이지 생성
  - HTML5 페이지 스타일 지정


  #### 랩 &#58; HTML5 페이지 생성 및 스타일 지정
  - HTML5 페이지 생성
  - HTML 페이지 스타일 지정

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - HTML5의 목적과 새로운 기능 설명 및 새로운 HTML5 요소를 사용하여 웹 페이지를 배치하는 방법 설명.
  - CSS를 사용하여 웹 페이지의 레이아웃, 텍스트 및 배경의 스타일을 지정하는 방법 설명.


  ### 모듈 3&#58; JavaScript 소개
  HTML과 CSS는 웹 페이지의 구조적, 의미론적 및 표시 정보를 제공합니다. 그러나 이러한 기술로는 사용자가 브라우저를 사용하여 페이지와 상호 작용하는 방법을 설명할 수 없습니다. 이 기능을 구현하기 위해 모든 최신 브라우저에는 페이지에서 스크립트 사용을 지원하는 JavaScript 엔진이 포함되어 있습니다. 또한 브라우저가 메모리에 페이지를 반영하는 방법을 정의하여 스크립트 엔진이 해당 페이지에 내용을 액세스하고 변경할 수 있도록 하는 W3C 표준인 DOM(문서 개체 모델)을 구현합니다. 본 모듈에서는 JavaScript 프로그래밍 및 DOM을 소개합니다.
  #### 단원
  - JavaScript 개요
  - DOM(문서 개체 모델) 소개


  #### 랩&#58; JavaScript를 사용한 데이터 표시 및 이벤트 처리.
  - 프로그래밍 방식으로 데이터 표시
  - 이벤트 처리

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 기본 JavaScript 구문 설명.
  - DOM을 사용하여 웹 페이지에서 정보를 변경 및 검색하는 JavaScript 코드 생성.


  ### 모듈 4&#58; 사용자 입력을 수집하고 검증하는 양식 생성
  웹 애플리케이션은 많은 경우 해당 작업을 수행하기 위해 사용자 입력 정보를 수집합니다. 사용자가 제공해야 하는 정보에 대한 실망스러운 착오를 최소화하기 위해 웹 페이지는 사용자로부터 예상되는 입력에 대해 명확하고 간결해야 합니다. 또한 모든 입력 자료에 대하여 애플리케이션의 요구 사항을 준수하는지를 검증해야 합니다. 본 모듈에서는 HTML5에서 사용할 수 있는 새로운 입력 유형을 사용하여 입력 양식을 정의하는 방법에 관해 설명합니다. HTML5 속성을 사용하여 데이터를 검증하는 방법도 설명합니다. 마지막으로, JavaScript 코드를 사용하여 확장 입력 검증을 수행하는 방법과 사용자의 입력이 유효하지 않거나 애플리케이션의 기대치와 일치하지 않을 때 사용자에게 피드백을 제공하는 방법에 관해 설명합니다.
  #### 단원
  - HTML5 양식 생성
  - HTML5 속성을 사용하여 사용자 입력 유효성 검사
  - JavaScript를 사용하여 사용자 입력 유효성 검사


  #### 랩&#58; 양식 생성 및 사용자 입력 유효성 검사
  - HTML5 속성을 사용한 양식 생성 및 사용자 입력 유효성 검사
  - JavaScript를 사용하여 사용자 입력 유효성 검사

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - HTML5를 사용하여 입력 양식 생성.
  - HTML5 양식 속성을 사용하여 데이터 유효성 검사.
  - HTML5 속성을 사용하여 쉽게 구현할 수 없는 유효성 검사 작업을 수행하는 JavaScript 코드 생성.


  ### 모듈 5&#58; 원격 서버와의 통신
  웹 애플리케이션은 많은 경우 원격 사이트에 저장된 데이터를 사용해야 합니다. 간단히 지정된 URL에서 다운로드하여 해당 데이터에 액세스할 수 있는 경우도 있지만 일부 원격 사이트에서는 데이터를 캡슐화하고 웹 서비스를 통해 액세스할 수 있도록 하는 경우도 있습니다. 본 모듈에서는 JavaScript 코드를 사용하여 웹 서비스에 액세스하고 웹 애플리케이션에 원격 데이터를 통합하는 방법에 관해 설명합니다. 이 목적을 달성하기 위한 두 가지 기술, 즉 원격 웹 사이트가 요청하는HTTP 요청 주변에서 프로그래밍 방식의 래퍼 역할을 하는 XMLHttpRequest 개체와 요청 전송 및 데이터 수신과 관련된 많은 작업을 단순화하는 Fetch API를 설명합니다. Fetch API 및 XMLHttpRequest 개체가 비동기식 API이므로 먼저 Promise 개체, 화살표 기능 및 비동기 요청을 동기식처럼 처리할 수 있는 새로운 비동기/대기 구문을 사용하여 비동기식 태스크를 처리하는 방법에 관해 설명합니다.
  #### 단원
  - JavaScript로 비동기 프로그래밍
  - XMLHttpRequest 개체를 사용하여 데이터 주고 받기
  - Fetch API를 사용하여 데이터 주고 받기


  #### 랩 &#58; 원격 데이터 원본과 통신
  - 데이터 검색
  - 데이터 직렬화 및 전송
  - jQuery ajax 방법을 사용하여 코드 리팩터링

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 새로운 비동기 프로그램 기술을 사용하여 비동기 JavaScript 작업 처리.
  - XMLHttpRequest 개체를 사용하여 웹 서비스와 데이터 주고 받기.
  - Fetch API를 사용하여 웹 서비스와 데이터 주고 받기.


  ### 모듈 6&#58; CSS3을 사용하여 HTML5 스타일 지정
  웹 페이지에 표시되는 콘텐츠의 스타일을 지정하는 것은 애플리케이션을 매력적이고 사용하기 쉽게 하는 중요한 측면입니다. CSS는 웹 애플리케이션에서 스타일 지정을 구현하기 위해 사용하는 주요 메커니즘이며, CSS3에 추가된 기능은 최신 브라우저에서 찾아볼 수 있는 많은 새로운 기능을 지원합니다. CSS1과 CSS2.1이 단일 문서인 경우, W3C(World Wide Web Consortium)는 각각 색상, 텍스트, 박스 모델 및 애니메이션과 같은 표시의 단일 측면에 초점을 맞춘 모듈 세트로 CSS3를 작성하기로 선택했습니다. 따라서 사양은 구현에 따라 점차적으로 발전할 수 있습니다. 각 사양은 CSS1 및 CSS2에 이미 존재하는 속성 및 값과 새로운 속성 및 값을 정의합니다. 본 모듈에서는 이러한 모듈 중 일부에 정의된 속성 및 값, CSS3에 정의된 새 선택기, 해당 선택을 구체화하기 위한 의사 클래스 및 의사 요소의 사용 등을 설명합니다.
  #### 단원
  - CSS3를 사용하여 텍스트 스타일 지정
  - 블록 요소 스타일 지정
  - 의사 클래스 및 의사 요소
  - CSS3를 사용하여 그래픽 효과 강조


  #### 랩 &#58; CSS3를 사용하여 텍스트 및 블록 요소 스타일 지정
  - 내비게이션 바 스타일 지정
  - 등록 링크 스타일 지정
  - 페이지 정보 스타일 지정

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 새로운 CSS3 기능을 사용하여 텍스트 요소 스타일 지정.
  - 새로운 CSS3 기능을 사용하여 블록 요소 스타일 지정.
  - CSS3 선택기, 의사 클래스, 의사 요소를 사용하여 요소의 스타일을 정교하게 지정.
  - CSS3 그래픽 효과를 이용하여 페이지 강조.


  ### 모듈 7&#58; JavaScript를 사용하여 개체 및 메서드 생성
  코드 재사용 및 관리 용이성은 잘 구성된 애플리케이션 작성의 주요 목표입니다. 이러한 목표를 달성할 수 있다면 코드 생성 및 유지 보수와 관련된 비용을 절감할 수 있습니다. 본 모듈에서는 네임스페이스, 개체, 캡슐화, 상속 등의 언어 기능을 사용하여 잘 구성된 JavaScript 코드를 작성하는 방법을 설명합니다. 이러한 개념은 Java 또는 C#와 같은 언어에 대한 경험이 있는 개발자에게는 친숙하게 보일 수 있지만, JavaScript 접근 방식은 상당히 다르며 유지 관리가 가능한 코드를 작성하려면 많은 세부 요소들을 이해해야 합니다.
  #### 단원
  - 잘 구성된 JavaScript 생성
  - 사용자 지정 개체 생성
  - 개체 확장


  #### 랩 &#58; 유지관리성 및 확장성을 위한 코드 세분화
  - 개체 상속
  - 개체를 사용하도록 JavaScript 코드 리팩터링

  본 모듈 후, 학생들은 다음을 수행할 수 있습니다&#58;
  - 잘 구성된 JavaScript 생성.
  - JavaScript 코드를 사용하여 사용자 지정 개체 생성.
  - JavaScript 관용구를 사용하여 개체 지향 기법 구현.


  ### 모듈 8&#58; HTML5 API를 사용하여 상호적인 페이지 생성
  대화형은 사용자의 동작에 신속하게 대응하고 사용자의 위치에 적응할 수 있는 강력한 웹 사이트를 구성할 수 있게 하는 현대 웹 애플리케이션의 주요 측면입니다. 본 모듈에서는 로컬 파일 시스템에 액세스할 수 있고 사용자가 웹 페이지의 요소에 데이터를 끌어서 놓을 수 있으며 멀티미디어 파일을 재생하고 지리 위치 정보를 얻을 수 있는 상호적인 HTML5 웹 애플리케이션을 작성하는 방법을 설명합니다.
  #### 단원
  - 파일과 상호 작용
  - 멀티미디어 통합
  - 브라우저 위치 및 컨텍스트에 대응
  - 웹 애플리케이션 디버깅 및 프로파일링


  #### 랩 &#58; HTML5 API로 상호적인 페이지 생성
  - 이미지 끌어다 놓기
  - 동영상 통합
  - Geolocation API를 사용하여 사용자의 현재 위치 보고

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 로컬 파일 시스템에 액세스 및 웹 페이지에 끌어서 놓기 지원 기능 추가.
  - 플러그인이 없이도 웹 페이지에서 비디오 및 오디오 파일 재생. 사용자의 현재 위치에 대한 정보 얻기.
  - Microsoft Edge의 F12 Developer Tools를 사용하여 웹 애플리케이션 디버깅 및 프로파일링.


  ### 모듈 9&#58; 웹 애플리케이션에 오프라인 지원 기능 추가
  웹 애플리케이션은 네트워크에 연결하여 웹 페이지와 데이터를 가져올 수 있는 의존성이 있습니다. 그러나 일부 환경에서는 네트워크 연결이 일시적일 수 있습니다. 이러한 상황에서는 사용자의 장치에 캐시된 데이터를 사용하여 애플리케이션이 계속 작동하도록 하는 것이 유용할 수 있습니다. HTML5는 세션 스토리지 및 로컬 스토리지를 비롯한 새로운 클라이언트 쪽 스토리지 옵션 선택과 애플리케이션 캐시라는 리소스 캐싱 메커니즘을 제공합니다. 본 모듈에서는 이러한 기술을 사용하여 네트워크가 연결되지 않은 경우에도 계속 실행할 수 있는 강력한 웹 애플리케이션을 작성하는 방법에 관해 설명합니다.
  #### 단원
  - 로컬에서 데이터 읽기 쓰기
  - 애플리케이션 캐시를 사용하여 오프라인 지원 추가


  #### 랩&#58; 웹 애플리케이션에 오프라인 지원 기능 추가
  - 애플리케이션 캐시를 사용하여 오프라인 데이터 캐싱
  - Local Storage API를 사용하여 사용자 데이터 저장

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 사용자의 장치에 로컬로 데이터를 저장하고 웹 애플리케이션에서 이 데이터에 액세스.
  - 애플리케이션 캐시를 사용하여 오프라인 작업을 지원하도록 웹 애플리케이션 구성.


  ### 모듈 10&#58; 적응형 사용자 인터페이스 구현
  웹의 가장 오래 지속되는 기능 중 하나는 임시 속성입니다. 처음으로 키보드와 마우스의 독점이 도전에 직면해 있으며, 이는 사용자 인터페이스가 어떻게 설계되는지에 대한 의문을 의미합니다. 고해상도의 대규모 모니터, 마우스 및 키보드가 있는 컴퓨터에서 웹 애플리케이션을 개발할 때,다른 사용자는 스마트폰이나 태블릿에서 마우스를 사용하지 않고 프로그램을 보고 상호 작용할 수 있으며 모니터의 해상도도 다를 수도 있습니다. 또한 사용자가 애플리케이션의 페이지를 인쇄하는 경우도 있습니다. 본 모듈에서는 페이지의 레이아웃과 기능을 현재 사용 중인 장치의 성능 및 폼 팩터에 맞게 조정하는 웹 사이트를 만드는 방법에 관해 설명합니다. 페이지를 보는 데 사용하는 장치 유형을 검색하는 방법과 특정 장치를 효과적으로 타겟팅한 콘텐츠를 배치하는 전략을 설명합니다.
  #### 단원
  - 다중 폼 팩터 지원
  - 적응형 사용자 인터페이스 생성


  #### 랩 &#58; 적응형 사용자 인터페이스 구현
  - 인쇄 친화적 스타일시트 생성
  - 다양한 폼 팩터에 맞게 페이지 레이아웃 조정

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 다양한 폼 팩터에 응답하기 위한 웹 사이트 요구 사항 설명.
  - 표시되는 장치의 폼 팩터와 일치하도록 레이아웃을 조정할 수 있는 웹 페이지 생성.


  ### 모듈 11&#58; 고급 그래픽 생성
  고해상도 상호적인 그래픽은 대부분의 최신 애플리케이션에서 중요한 부분입니다. 그래픽은 콘텐츠에 시각적 측면을 제공하여 웹 사이트를 더욱 매력적이고 사용하기 쉽게 만들어 사용자의 경험을 향상시키는 데 도움이 됩니다. 대화형은 웹 사이트의 그래픽 요소를 통해 환경에 대한 사용자 입력 또는 변화에 적응하고 대응할 수 있도록 하며, 사용자의 주의와 콘텐츠에 대한 관심을 유지하는 또 다른 중요한 요소입니다.

  본 모듈에서는 SVG(Scalable Vector Graphics) 및 Microsoft Canvas API를 사용하여 HTML5에서 고급 그래픽을 생성하는 방법을 설명합니다. SVG 관련 요소를 사용하고 웹 페이지에 그래픽 콘텐츠를 표시하는 방법도 설명합니다. 또한 키보드 이벤트 및 마우스 이벤트와 같은 이벤트를 사용하여 사용자가 SVG 요소와 상호 작용할 수 있도록 설정하는 방법도 설명합니다.

  Canvas API는 SVG와는 다소 다릅니다. Canvas API는 캔버스 표면에 그래픽을 그리기 위해 호출할 수 있는 JavaScript 요소와 함수들을 제공합니다. 또한 Canvas API를 사용하는 방법과 Canvas 또는 SVG를 사용하기 적합한 시기를 설명합니다.
  #### 단원
  - SVG를 사용하여 상호적인 그래픽 생성
  - Canvas API를 사용하여 그래픽 그리기


  #### 랩 &#58; 고급 그래픽 생성
  - SVG를 사용하여 상호적인 행사장 지도 생성
  - Canvas API를 사용하여 발표자 배지 만들기

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - SVG를 사용하여 상호적인 그래픽 콘텐츠 생성.
  - Canvas API를 사용하여 프로그래밍 방식으로 그래픽 콘텐츠 생성.


  ### 모듈 12&#58; 사용자 인터페이스 애니메이션
  애니메이션은 웹 사이트에 대한 사용자의 관심을 유지하는 핵심 요소입니다. 신중하게 구현된 애니메이션은 웹 페이지의 사용성을 개선하고 사용자 동작에 따라 유용한 시각적 피드백을 제공합니다.

  본 모듈에서는 CSS 애니메이션을 사용하여 웹 페이지를 향상시키는 방법을 설명합니다. 속성 값에 전환을 적용하는 방법에 대해 알아봅니다. 전환을 사용하여 속성 변경 시기를 지정할 수 있습니다. 예를 들어, 마우스 포인터가 요소 위로 이동할 때 5초 동안 요소의 너비와 높이가 변경되도록 지정할 수 있습니다. 다음으로 요소에 2D 및 3D 변환을 적용하는 방법을 설명합니다. 변환을 사용하여 요소를 확장 또는 축소, 변환, 회전 및 기울일 수 있습니다. 변환에 전환을 적용하여 지정된 애니메이션 기간 동안 변환이 점진적으로 적용되도록 할 수도 있습니다.

  본 모듈의 마지막 부분에서 키프레임 애니메이션을 요소에 적용하는 방법도 설명합니다. 키프레임 애니메이션을 사용하면 애니메이션 도중 특정한 시각의 속성 값 집합을 정의할 수 있습니다. 예를 들어 요소의 색상과 위치를 애니메이션 기간의 0%, 33%, 66%, 100%로 지정할 수 있습니다.
  #### 단원
  - CSS 전환 적용
  - 요소 변환
  - CSS 키프레임 애니메이션 적용


  #### 랩 &#58; 사용자 인터페이스 애니메이션
  - CSS 전환 적용
  - 키프레임 애니메이션 적용

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 전환을 적용하여 HTML 요소에 대한 속성 값 애니메이션.
  - HTML 요소에 2D 및 3D 변환 적용.
  - HTML 요소에 키프레임 애니메이션 적용.


  ### 모듈 13&#58; Web Sockets를 이용한 실시간 커뮤니케이션 구현
  웹 페이지는 웹 서버의 요구에 따라 HTTP 요청을 제출하여 데이터를 요청합니다. 본 모델은 사용자의 동작에 따라 기능이 작동하는 상호적인 애플리케이션을 작성하는 데 이상적입니다. 그러나 지속적으로 변화하는 정보를 표시해야 하는 애플리케이션의 경우 이 메커니즘이 적합하지 않습니다. 예를 들어, 금융 주식 페이지는 단 몇 분 전의 가격이 표시되더라도 사용자가 브라우저에 표시된 페이지의 새로 고침을 계속 진행할 것을 기대할 수 없는 경우 사용 가치가 없습니다. 이런 경우 웹 소켓이 유용합니다. Web Sockets API는 웹 서버와 브라우저 간에 실시간 양방향 통신을 구현하는 메커니즘을 제공합니다.

  본 모듈에서는 웹 소켓을 소개하고 작동 방식을 설명하며 웹 페이지와 웹 서버 간에 데이터를 실시간으로 전송하는 데 사용할 수 있는 웹 소켓 연결을 만드는 방법을 설명합니다.
  #### 단원
  - 웹 소켓 소개
  - WebSocket API 사용


  #### 랩 &#58; 웹 소켓을 이용한 실시간 커뮤니케이션 수행
  - 웹 소켓에서 메시지 받기
  - 웹 소켓으로 메시지 보내기
  - 다양한 웹 소켓 메시지 유형 처리

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - 웹 소켓을 사용하여 웹 페이지와 웹 서버 간의 실시간 통신을 가능하게 하는 방법 설명.
  - Web Sockets API를 사용하여 웹 페이지에서 웹 서버에 연결하고 웹 페이지와 웹 서버 간에 메시지 교환.


  ### 모듈 14&#58; Web Workers를 사용하여 백그라운드 처리 수행
  JavaScript 코드는 웹 페이지의 기능을 구현하는 강력한 도구이지만 웹 페이지가 로드될 때 또는 웹 페이지가 표시되는 동안 사용자 동작에 대한 응답으로 해당 코드가 실행된다는 점을 알고 있어야 합니다. 코드는 브라우저를 통해 실행되며, 코드가 완료하는 데 상당한 시간이 걸리는 작업을 수행하는 경우 브라우저가 응답하지 않고 사용자 경험이 저하될 수 있습니다.

  HTML5에서는 별도의 백그라운드 스레드로 처리를 오프로드하여 브라우저의 응답성을 유지할 수 있도록 하는 web worker를 소개합니다. 본 모듈에서는 Web Workers의 작동 방식과 웹 애플리케이션에서 Web Workers를 사용하는 방법을 설명합니다.
  #### 단원
  - Web Workers 이해
  - Web Workers를 사용하여 비동기 처리 수행


  #### 랩 &#58; Web Worker 프로세스 생성
  - Web Worker를 사용하여 응답성 개선

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다&#58;
  - Web Workers를 사용하여 멀티스레딩을 구현하고 웹 애플리케이션의 응답성을 개선하는 방법 설명.
  - Web Worker를 사용하여 프로세스 처리, Web Worker와 통신, Web Worker 제어.


  ### 모듈 15&#58; 프로덕션 배포를 위한 JavaScript 패키징
  모델을 사용하면 크고 복잡한 애플리케이션을 작성할 수 있습니다. ECMAScript6 버전에서 언어의 향상을 통해 빌드한 앱이 애플리케이션 구성 프로세스를 단순화할 수 있습니다.
  그러나 ECMAScript6 모듈 및 기타 기능은 일부 브라우저에서 아직 지원되지 않습니다. Node.js, Webpack 및 Babel과 같은 도구를 사용하면 사용자 환경에 영향을 주지 않도록 여러 브라우저에 대한 지원과 함께 새로운 언어 기능을 사용할 수 있습니다.

  본 모듈에서는 이러한 도구에 대한 이론과 도구 사용 시기, 그리고 다양한 사용 옵션을 소개합니다. 모듈의 마지막 부분에서는 이러한 도구를 사용하여 모든 브라우저에서 지원되는 ECMAScript6 코드를 작성하는 방법을 설명합니다.
  #### 단원
  - Transpilers 및 Module bundling 이해
  - 크로스 브라우저 지원을 위한 개별 패키지 생성


  #### 랩 &#58; 프로덕션용 Webpack 번들 설정
  - WebPack을 사용하여 패키지 생성 및 배포

