### YamlMime:Course
title: Querying Data with Transact-SQL
metadata:
  title: 'Course 20761-C: Querying Data with Transact-SQL'
  description: 'Course 20761-C: Querying Data with Transact-SQL'
uid: course.20761
courseNumber: '20761-C'
hoursToComplete: 120
iconUrl: /media/learn/certification/course.svg
skillsGained:
- skill: SQL Server의 주요 기능 및 구성 요소 설명.
- skill: T-SQL, 집합 및 술어 논리 설명.
- skill: 단일 테이블 SELECT 문 작성.
- skill: 다중 테이블 SELECT 문 작성.
- skill: 필터링 및 정렬을 사용한 SELECT 문 작성.
- skill: SQL Server 데이터 형식 사용 방법 설명.
- skill: DML 문 작성.
- skill: 기본 제공 함수를 사용한 쿼리 작성.
- skill: 데이터 집계 쿼리 작성.
- skill: 하위 쿼리 작성.
- skill: 뷰 및 테이블 반환 함수 생성 및 구현.
- skill: 집합 연산자를 사용하여 쿼리 결과 결합.
- skill: 윈도우 순위 지정, 오프셋 및 집계 함수를 사용하여 쿼리 작성.
- skill: PIVOT, UNPIVOT, ROLLUP 및 CUBE 구현을 통한 데이터 변환.
- skill: 저장된 프로시저 생성 및 구현.
- skill: 변수, 조건 및 루프 등 프로그래밍 구문을 T-SQL 코드에 추가.
learningPartnersLink: https://www.microsoft.com/learning/partners.aspx
locales:
- en
levels:
- intermediate
roles:
- database-administrator
products:
- sql-server
exams:
- uid: exam.70-761
summary: |-
  학생들에게 Transact-SQL을 소개하기 위해 설계된 과정입니다. 처음 3일은 SQL Server 커리큘럼 중 다른 과정에 관한 지식이 필요한 학생을 위한 과정으로 설계되었습니다. 4일 및 5일째에는 시험 70-761에 응시하기 위해 필요한 기술을 가르칩니다.

  #### 대상 그룹 프로필
  이 과정의 주요 목적은 학생들이 데이터베이스 관리, 데이터베이스 개발 및 Business Intelligence와 같이 모든 SQL Server 관련 분야에서 사용되는 Transact-SQL 언어를 잘 이해하도록 하기 위한 것입니다. 따라서 이 과정의 주요 대상 그룹은 데이터베이스 관리자, 데이터베이스 개발자 및 BI 전문가입니다.
prerequisitesSection: |-
  - Microsoft Windows 운영 체제 및 해당 핵심 기능 기초 지식.
  - 관계형 데이터베이스 실무 지식.
outlineSection: |-
  ### 모듈 1&#58; Microsoft SQL Server 소개
  이 모듈에서는 SQL Server, 클라우드 버전을 포함한 SQL Server 버전 및 SQL Server Management Studio를 사용하여 SQL Server에 연결하는 방법을 소개합니다.
  #### 단원
  - SQL Server 기본 아키텍처
  - SQL Server 에디션 및 버전
  - SQL Server Management Studio 시작


  #### 랩 &#58; SQL Server 도구로 작업
  - SQL Server Management Studio로 작업
  - T-SQL 스크립트 생성 및 구성
  - Books Online 사용

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 관계형 데이터베이스 및 Transact-SQL 쿼리 설명.
  - SQL Server의 온-프레미스 및 클라우드 기반 에디션 및 버전 설명.
  - SSMS(SQL Server Management Studio)를 사용하여 SQL Server 인스턴스에 연결, 인스턴스에 포함된 데이터베이스 탐색 및 T-SQL 쿼리가 포함된 스크립트 파일 작업 방법 설명.


  ### 모듈 2&#58; T-SQL 쿼리 소개
  이 모듈에서는 T-SQL 요소 및 쿼리 작성 시 그들의 역할을 설명합니다. SQL Server의 집합 사용 설명. SQL Server의 술어 논리 사용 설명. SELECT 문의 논리 연산 순서 설명.


  #### 단원
  - T-SQL 소개
  - 집합 이해
  - 술어 논리 이해
  - SELECT 문의 논리 연산 순서 이해


  #### 랩 &#58; T-SQL 쿼리 소개
  - 기본 SELECT 문 실행
  - 술어를 사용한 데이터 필터 쿼리 실행
  - ORDER BY를 사용한 데이터 정렬 쿼리 실행

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SELECT 문 작성 시 T-SQL 역할 설명.
  - T-SQL 언어 요소 및 쿼리 작성에 유용한 요소 설명.
  - 관계형 데이터베이스의 수학적 토대 중 하나인 집합 이론 개념 설명 및 SQL Server 쿼리 방법을 생각하는 데 도움이 되도록 이론 적용
  - 술어 논리 설명 및 SQL Server 쿼리에 적용 검토.
  - SELECT 문 요소 설명, 요소가 평가되는 순서 설명 및 이러한 이해를 실용적인 쿼리 작성 접근법에 적용.


  ### 모듈 3&#58; SELECT 쿼리 작성
  이 모듈에서는 SELECT 문 기초를 소개하고 단일 테이블에 대한 쿼리에 중점을 둡니다.
  #### 단원
  - 간단한 SELECT 문 작성
  - DISTINCT로 중복 제거
  - 칼럼 및 테이블 별칭 사용
  - 간단한 CASE 식 작성


  #### 랩 &#58; 간단한 SELECT 문 작성
  - 간단한 SELECT 문 작성
  - DISTINCT를 사용한 중복 제거
  - 칼럼 및 테이블 별칭 사용
  - 간단한 CASE 식 사용

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SELECT 문 구조 및 형식, 쿼리에 기능 및 가독성을 추가시키는 증대 설명
  - DISTINCT 절을 사용한 중복 제거 방법 설명
  - 칼럼 및 테이블 별칭 사용 설명
  - CASE 식 이해 및 사용


  ### 모듈 4&#58; 여러 테이블 쿼리
  이 모듈에서는 Microsoft SQL Server에서 여러 소스의 데이터를 결합하는 쿼리 작성 방법을 설명합니다.


  #### 단원
  - Join이해
  - 내부 Join으로 쿼리
  - Outer Join으로 쿼리
  - 크로스 Join및 셀프 Join으로 쿼리


  #### 랩 &#58; 여러 테이블 쿼리
  - Inner Joins을 사용한 쿼리 작성
  - 다중 테이블 내부 Join을 사용한 쿼리 작성
  - Self-Joins을 사용한 쿼리 작성
  - Outer Join을 사용한 쿼리 작성
  - Cross Joins을 사용한 쿼리 작성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server의 Join 기본 사항 설명 
  - Inner Join 쿼리 작성
  - Outer Join을 사용한 쿼리 작성 
  - 추가 Join 유형 사용


  ### 모듈 5&#58; 데이터 정렬 및 필터링
  이 모듈에서는 정렬 및 필터링 구현 방법을 설명합니다.
  #### 단원
  - 데이터 정렬
  - 술어로 데이터 필터링
  - TOP 및 OFFSET-FETCH로 데이터 필터링
  - 알 수 없는 값으로 작업


  #### 랩 &#58; 데이터 정렬 및 필터링
  - WHERE 절을 사용한 데이터 필터 쿼리 작성
  - ORDER BY 절을 사용한 데이터 정렬 쿼리 작성
  - TOP 옵션을 사용한 데이터 필터 쿼리 작성
  - OFFSET-FETCH 절을 사용한 데이터 필터 쿼리 작성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 쿼리 출력에 표시되는 행의 순서 제어를 위해 쿼리에 ORDER BY 절 추가 방법을 설명
  - 술어와 일치하지 않는 행의 필터링을 위해 WHERE 절 구성 방법 설명.
  - TOP 옵션을 사용하여 SELECT 절에서 행의 범위 제한 방법 설명. 
  - ORDER BY 절의 OFFSET-FETCH 옵션을 사용하여 행의 범위 제한 방법 설명.
  - 3차 논리에서 알 수 없고 결측 값처리 방법, SQL Server가 NULL을 사용하여 결측 값 표시 방법 및 쿼리에서 NULL을 테스트하는 방법 설명.

  ### 모듈 6&#58; SQL Server 데이터 형식으로 작업
  이 모듈에서는 SQL Server가 데이터를 저장하는 데 사용하는 데이터 형식을 소개합니다.
  #### 단원
  - SQL Server 데이터 형식 소개
  - 문자 데이터로 작업
  - 데이터 및 날짜 데이터로 작업


  #### 랩 &#58; SQL Server 데이터 형식으로 작업
  - 날짜 및 시간 데이터 반환 쿼리 작성
  - 날짜 및 시간 함수 사용 쿼리 작성
  - 문자 데이터 반환 쿼리 작성
  - 문자 함수 반환 쿼리 작성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server가 데이터 저장에 사용하는 여러 데이터 형식 및 데이터 형식이 형식 간에 변환되는 방식 살펴보기
  - SQL Server 문자 기반 데이터 형식, 문자 비교 작동 방식 및 쿼리에 유용한 몇 가지 일반적인 함수 설명
  - 임시 데이터 저장에 사용되는 데이터 형식, SQL Server가 올바르게 파싱하도록 날짜 및 시간을 입력하는 방법 및 기본 제공 함수를 사용하여 날짜와 시간을 조작하는 방법 설명.


  ### 모듈 7&#58; DML을 사용한 데이터 수정
  이 모듈에서는 DML 쿼리 생성 방법 및 필요성을 설명합니다.
  #### 단원
  - 테이블에 데이터 추가
  - 데이터 수정 및 삭제
  - 자동 열 값 생성


  #### 랩 &#58; DML을 사용한 데이터 수정
  - DML을 사용하여 레코드 삽입
  - DML을 사용하여 레코드 업데이트 및 삭제

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - INSERT 및 SELECT INTO 문 사용
  - UPDATE, MERGE, DELETE 및 TRUNCATE 사용.


  ### 모듈 8&#58; 기본 제공 함수 사용
  이 모듈에서는 SQL Server의 많은 기본 제공 함수 중 일부를 소개합니다.
  #### 단원
  - 내장 함수로 쿼리 작성
  - 변환 함수 사용
  - 논리 함수 사용
  - 함수를 사용하여 NULL와 작업


  #### 랩 &#58; 기본 제공 함수 사용
  - 변환 함수 사용 쿼리 작성
  - 논리 함수 사용 쿼리 작성
  - Null 허용 여부 테스트 쿼리 작성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server에서 제공하는 함수 유형 설명 및 스칼라 함수 작업에 중점
  - 여러 SQL Server 함수를 사용한 유형 간에 명시적인 데이터 변환 방법 설명
  - 논리적 함수를 사용하여 식을 평가하고 스칼라 결과를 반환하는 방법 설명.
  - NULL 작업을 위한 추가 함수 설명


  ### 모듈 9&#58; 데이터 그룹화 및 집계
  이 모듈에서는 집계 함수 사용 방법을 설명합니다.
  #### 단원
  - 집계 함수 사용
  - GROUP BY 절 사용
  - HAVING을 사용한 그룹 필터링


  #### 랩 &#58; 데이터 그룹화 및 집계
  - GROUP BY 절을 사용 쿼리 작성
  - 집계 함수를 사용 쿼리 작성
  - Distinct 집계 함수 사용 쿼리 작성
  - HAVING 절을 사용 그룹 필터 쿼리 작성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SQL Server의 기본 제공 집계 함수 설명 및 해당 함수를 사용한 쿼리 작성.
  - GROUP BY 절을 사용한 행을 분리하는 쿼리 작성.
  - HAVING 절을 사용하여 그룹을 필터링하는 쿼리 작성.


  ### 모듈 10&#58; 하위 쿼리 사용
  이 모듈에서는 몇 가지 하위 쿼리 유형과 이러한 쿼리 사용 방법 및 시기를 설명합니다.
  #### 단원
  - 독립 하위 쿼리 작성
  - 상호 관련된 하위 쿼리 작성
  - EXISTS 술어를 하위 쿼리와 함께 사용


  #### 랩 &#58; 하위 쿼리 사용
  - 독립 하위 쿼리를 사용한 쿼리 작성
  - 스칼라 및 다중 결과 하위 쿼리 사용 쿼리 작성
  - 상호 관련된 하위 쿼리 및 EXISTS 절을 사용하는 쿼리 작성

  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - SELECT 문에서 하위 쿼리가 사용될 수 있는 곳 설명.
  - SELECT 문에서 상호 관련된 하위 쿼리가 사용될 수 있는 쿼리 작성
  - 한정된 행의 존재를 테스트하기 위해 WHERE 절에 EXISTS 술어를 사용하는 쿼리 작성
  - EXISTS 술어를 사용하여 하위 쿼리에 행이 있는지 효율적으로 점검.


  ### 모듈 11&#58; 테이블 식 사용
  이 과정 앞에서 외부 호출 쿼리에 결과를 반환하는 식으로 하위 쿼리를 사용하는 방법을 학습했습니다. 하위 쿼리처럼 테이블 식은 쿼리 식이지만 테이블 식은 이 발상을 확장하여 모든 유효한 관계형 테이블에서 데이터를 작업해야 할 때 식에 이름을 지정하고 식의 결과를 작업할 수 있습니다. Microsoft SQL Server는 파생 테이블, CTE(공용 테이블 식), 뷰 및 인라인 (TVF)테이블 반환 함수의 4 가지 유형의 테이블 식을 지원합니다. 이 모듈에서는 이러한 형식의 테이블 식으로 작업하고 이를 사용하여 쿼리 작성에 모듈식 접근법을 사용하는 방법을 학습합니다.
  #### 단원
  - 뷰 사용
  - 인라인 테이블 반환 함수 사용
  - 파생 테이블 사용
  - 공용 테이블 식 사용


  #### 랩 &#58; 테이블 식 사용
  - 뷰를 사용하는 쿼리 작성
  - 파생 테이블을 사용하는 쿼리 작성
  - CTE(공용 테이블 식)을 사용하는 쿼리 작성
  - TVF(인라인 테이블 반환 식)을 사용하는 쿼리 작성
  
  본 모듈을 마친 후에는 다음을 수행할 수 있습니다. 
  - 뷰에서 결과를 반환하는 쿼리 작성.
  - CREATE FUNCTION 문을 사용한 간단한 인라인 TVF 생성.
  - 파생 테이블에서 결과 생성 및 검색 쿼리 작성.
  - CTE를 생성하고 테이블 식에서 결과를 반환하는 쿼리 작성.


  ### 모듈 12&#58; 집합 연산자 사용
  이 모듈에서는 두 입력 집합 사이의 행 비교를 위해 UNION, INTERSECT 및 EXCEPT 집합 연산자 사용 방법을 소개합니다.
  #### 단원
  - UNION 연산자로 쿼리 작성
  - EXCEPT와 INTERSECT 사용
  - APPLY 사용


  #### 랩 &#58; 집합 연산자 사용
  - UNION 집합 연산자 및 UNION을 사용하는 쿼리 작성
  - CROSS APPLY 및 OUTER APPLY 연산자를 사용하는 쿼리 작성
  - EXCEPT 및 INTERSECT 연산자를 사용하는 쿼리 작성

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다.
  - UNION을 사용하여 입력 집합 결합 쿼리 작성.
  - UNION ALL을 사용하여 입력 집합 결합 쿼리 작성
  - EXCEPT 연산자를 사용하여서 한 집합에서 행을 반환하고 다른 집합에서는 반환하지 않는 쿼리 작성.
  - INTERSECT 연산자를 사용하여 두 집합 모두에 존재하는 행만 반환하는 쿼리 작성
  - CROSS APPLY 연산자를 사용한 쿼리 작성.
  - OUTER APPLY 연산자를 사용한 쿼리 작성.


  ### 모듈 13&#58; 윈도우 순위 지정, 오프셋 및 집계 함수 사용
  이 모듈에서는 윈도우 함수 사용 이점을 설명합니다. 파티션 및 프레임을 포함하여 OVER 절에 정의된 행으로 윈도우 함수 제한. 행 및 반환 순위 지정, 집계 및 오프셋 비교 결과의 윈도우를 조작하는 윈도우 함수를 사용하는 쿼리 작성.
  #### 단원
  - OVER로 윈도우 생성
  - 윈도우 함수 살펴보기


  #### 랩 &#58; 윈도우 순위 지정, 오프셋 및 집계 함수 사용
  - 순위 함수 사용 쿼리 작성
  - 오프셋 함수 사용 쿼리 작성
  - 윈도우 집계 함수 사용 쿼리 작성

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다.
  - 윈도우 정의에 사용되는 T-SQL 구성 요소 및 이들 간 관계 설명.
  - OVER 절을 사용하여 분할, 순서 및 프레임으로 윈도우를 정의하는 쿼리 작성
  - 윈도우 집계 함수 사용 쿼리 작성.
  - 윈도우 순위 함수 사용 쿼리 작성.
  - 윈도우 오프셋 함수 사용 쿼리 작성


  ### 모듈 14&#58; 집합 피벗팅 및 그룹화
  이 모듈에서는 결과 집합 피벗 및 피벗 해제 쿼리 작성 방법을 설명합니다. Grouping Sets로 다중 그룹화 명시 쿼리 작성
  #### 단원
  - PIVOT 및 UNPIVOT으로 쿼리 작성
  - Grouping Sets로 작업


  #### 랩 &#58; 집합 피벗팅 및 그룹화
  - 피벗 연산자를 사용하는 쿼리 작성
  - UNPIVOT 연산자를 사용하는 쿼리 작성
  - GROUPING SETS CUBE 및 ROLLUP 하위 절을 사용하는 쿼리 작성

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다.
  - T-SQL 쿼리에서 피벗 데이터 사용 방법 설명.
  - 피벗 연산자를 사용하여 행에서 열로 데이터 피벗하는 쿼리 작성.
  - UNPIVOT 연산자를 사용하여 열에서 행으로 데이터를 피벗 해제하는 쿼리 작성.
  - GROUPING SETS 하위 절을 사용한 쿼리 작성.
  - ROLLUP AND CUBE를 사용한 쿼리 작성.
  - GROUPING_ID 함수 사용 쿼리 작성.


  ### 모듈 15&#58; 저장된 프로시저 실행
  이 모듈에서는 저장된 프로시저를 실행하여 결과 반환 방법을 설명합니다. 프로시저에 매개 변수 전달. SELECT 문을 캡슐화하는 간단한 저장된 프로시저 생성. EXEC 및 sp_executesql을 사용한 동적 SQL 구성 및 실행.
  #### 단원
  - 저장된 프로시저로 데이터 쿼리
  - 저장된 프로시저에 매개 변수 전달
  - 간단한 저장된 프로시저 생성
  - 동적 SQL로 작업


  #### 랩 &#58; 저장된 프로시저 실행
  - EXECUTE 문을 사용해서 저장된 프로시저 호출
  - 저장된 프로시저에 매개 변수 전달
  - 시스템 저장된 프로시저 실행

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다.
  - 저장된 프로시저 및 사용법 설명.
  - 저장된 프로시저 실행으로 데이터를 반환하는 T-SQL 문 작성.
  - 입력 매개 변수를 저장된 프로시저로 전달하는 EXECUTE 문 작성.
  - 출력 매개 변수 준비와 저장된 프로시저를 실행하는 T-SQL 배치 작성.
  - CREATE PROCEDURE 문을 사용한 저장된 프로시저 작성.
  - 입력 매개 변수를 받아들이는 저장된 프로시저 생성.
  - T-SQL을 동적으로 구성하는 방법 설명.
  - 동적 SQL을 사용한 쿼리 작성.


  ### 모듈 16&#58; T-SQL 프로그래밍
  이 모듈에서는 프로그래밍 요소로 T-SQL 코드를 개선하는 방법을 설명합니다.
  #### 단원
  - T-SQL 프로그래밍 요소
  - Program Flow 제어


  #### 랩 &#58; T-SQL로 프로그래밍
  - 변수 및 구분 기호 배치 선언
  - 제어 흐름 요소 사용
  - 동적 SQL 문에서 변수 사용
  - 동의어 사용

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다.
  - Microsoft SQL Server가 배치로서 명령문 컬렉션을 처리하는 방법 설명.
  - SQL Server에서 실행할 T-SQL 코드 배치 생성 및 제출.
  - SQL Server가 변수로서 임시 객체를 저장하는 방법 설명.
  - 변수 선언 및 할당 코드 작성.
  - 동의어 생성 및 호출
  - T-SQL의 흐름 제어 요소 설명.
  - IFELSE 블록을 사용한 T-SQL 코드 작성.
  - WHILE을 사용한 T-SQL 코드 작성.


  ### 모듈 17&#58; 오류 처리 구현
  이 모듈에서는 T-SQL용 오류 처리를 소개합니다.
  #### 단원
  - T-SQL 오류 처리 구현
  - 구조적 예외 처리 구현


  #### 랩 &#58; 오류 처리 구현
  - TRY/CATCH로 오류 리디렉션
  - THROW를 사용하여 오류 메시지를 클라이언트에게 다시 전달

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다.
  - T-SQL 오류 처리 구현.
  - 구조적 예외 처리 구현.


  ### 모듈 18&#58; 트랜잭션 구현
  이 모듈에서는 트랜잭션 구현 방법을 설명합니다.
  #### 단원
  - 트랜잭션 및 데이터베이스 엔진
  - 트랜잭션 제어


  #### 랩 &#58; 트랜잭션 구현
  - BEGIN, COMMIT 및 ROLLBACK으로 트랜잭션 제어
  - CATCH 블록에 오류 처리 추가

  본 모듈을 완료하면 학생들은 다음을 수행할 수 있습니다.
  - 트랜잭션 및 배치와 트랜잭션의 차이점 설명.
  - 배치 및 SQL Server에로 처리된 배치 처리 방법 설명.
  - TCL(트랜잭션 제어 언어) 문을 사용한 트랜잭션 생성 및 관리.
  - SET XACT_ABORT을 사용하여 TRY/CATCH 블록 외부에서 SQL Server 트랜잭션 처리 정의.

